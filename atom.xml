<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Platypus Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://platypuspro.github.io/"/>
  <updated>2015-04-11T14:04:52.000Z</updated>
  <id>http://platypuspro.github.io/</id>
  
  <author>
    <name><![CDATA[Platypus]]></name>
    <email><![CDATA[1293705262@qq.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[BZOJ 3932]]></title>
    <link href="http://platypuspro.github.io/posts/bzoj-3932/"/>
    <id>http://platypuspro.github.io/posts/bzoj-3932/</id>
    <published>2015-04-11T13:36:02.000Z</published>
    <updated>2015-04-11T14:04:52.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>还是太naive…</p>
</blockquote>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3932" target="_blank" rel="external">传送门</a></p>
<h3 id="题目描述">题目描述</h3><p>最近实验室正在为其管理的超级计算机编制一套任务管理系统，而你被安排完成其中的查询部分。<br>超级计算机中的任务用三元组$(S_i,E_i,P_i)$描述，$(S_i,E_i,P_i)$表示任务从第$S_i$秒开始，在第$E_i$秒后结束（第$S_i$秒和$E_i$秒任务也在运行），其优先级为$P_i$。同一时间可能有多个任务同时执行，它们的优先级可能相同，也可能不同。调度系统会经常向查询系统询问，第$X_i$秒正在运行的任务中，优先级最小的$K_i$个任务（即将任务按照优先级从小到大排序后取前$K_i$个）的优先级之和是多少。特别的，如果$K_i$大于第$X_i$秒正在运行的任务总数，则直接回答第$X_i$秒正在运行的任务优先级之和。上述所有参数均为整数，时间的范围在$1$到$n$之间（包含$1$和$n$）。</p>
<h3 id="输入格式">输入格式</h3><p>输入文件第一行包含两个空格分开的正整数$m$和$n$，分别表示任务总数和时间范围。<br>接下来$m$行，每行包含三个空格分开的正整数$S_i,E_i,P_i(S_i\leq E_i)$，描述一个任务。<br>接下来$n$行，每行包含四个空格分开的整数$X_i,A_i,B_i和C_i$，描述一次查询。查询的参数$K_i$需要由公式$K_i=1+(A_i\cdot Pre+B_i)mod\ C_i$计算得到。其中$Pre$表示上一次查询的结果，对于第一次查询，$Pre=1$。</p>
<h3 id="输出格式">输出格式</h3><p>输出共$n$行，每行一个整数，表示查询结果。</p>
<h3 id="输入样例">输入样例</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">43</span><br><span class="line">126</span><br><span class="line">233</span><br><span class="line">132</span><br><span class="line">334</span><br><span class="line">3132</span><br><span class="line">1134</span><br><span class="line">2243</span><br></pre></td></tr></table></figure>
<h3 id="输出样例">输出样例</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">8</span><br><span class="line">11</span><br></pre></td></tr></table></figure>
<h3 id="样例解释">样例解释</h3><p>$K_1=(1\times 1+3)mod\ 2+1=1$<br>$K_2=(1\times 2+3)mod\ 4+1=2$<br>$K_3=(2\times 8+4)mod\ 3+1=3$</p>
<h3 id="数据范围">数据范围</h3><p>对于$50%$的数据，$A_i=0$<br>对于$100%$的数据，$1\leq m,n,S_i,E_i,C_i\leq 100000,0\leq A_i,B_i\leq 100000,1\leq P_i\leq 10000000$,$X_i$为$1$到$n$的一个排列</p>
<p>主席树（题解先挖坑，有空了好好画个图讲一下…暂时先看代码脑补= =）</p>
<p><i class="fa fa-code fa-2x"></i></p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">program</span> bzoj_3932;</span><br><span class="line"><span class="keyword">type</span> op=<span class="keyword">record</span> st,p:longint; flag:boolean; <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">var</span> s:<span class="keyword">array</span>[<span class="number">0</span>..<span class="number">4900000</span>]<span class="keyword">of</span> <span class="keyword">record</span> lc,rc,size:longint; sum:int64; <span class="keyword">end</span>;</span><br><span class="line">    q:<span class="keyword">array</span>[<span class="number">0</span>..<span class="number">200000</span>]<span class="keyword">of</span> op;</span><br><span class="line">    n,m,x,a,b,c,k,i,j,maxp,tot:longint;</span><br><span class="line">    root:<span class="keyword">array</span>[<span class="number">0</span>..<span class="number">200000</span>]<span class="keyword">of</span> longint;</span><br><span class="line">    ans:int64;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">min</span><span class="params">(a,b:longint)</span>:</span>longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">if</span> a&lt;b <span class="keyword">then</span> <span class="keyword">exit</span>(a) <span class="keyword">else</span> <span class="keyword">exit</span>(b);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">qsort</span><span class="params">(l,r:longint)</span>;</span></span><br><span class="line"><span class="keyword">var</span> i,j:longint;</span><br><span class="line">    mid,p:op;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  i:=l;</span><br><span class="line">  j:=r;</span><br><span class="line">  mid:=q[(l+r)&gt;&gt;<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">repeat</span></span><br><span class="line">    <span class="keyword">while</span> q[i].st&lt;mid.st <span class="keyword">do</span> inc(i);</span><br><span class="line">    <span class="keyword">while</span> q[j].st&gt;mid.st <span class="keyword">do</span> dec(j);</span><br><span class="line">    <span class="keyword">if</span> i&lt;=j <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      p:=q[i];</span><br><span class="line">      q[i]:=q[j];</span><br><span class="line">      q[j]:=p;</span><br><span class="line">      inc(i);</span><br><span class="line">      dec(j);</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">until</span> i&gt;j;</span><br><span class="line">  <span class="keyword">if</span> i&lt;r <span class="keyword">then</span> qsort(i,r);</span><br><span class="line">  <span class="keyword">if</span> l&lt;j <span class="keyword">then</span> qsort(l,j);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">insert</span><span class="params">(<span class="keyword">var</span> t:longint;base,p,l,r:longint;flag:boolean)</span>;</span></span><br><span class="line"><span class="keyword">var</span> mid:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  inc(tot);</span><br><span class="line">  t:=tot;</span><br><span class="line">  s[t]:=s[base];</span><br><span class="line">  <span class="keyword">if</span> flag <span class="keyword">then</span> inc(s[t].size) <span class="keyword">else</span> dec(s[t].size);</span><br><span class="line">  <span class="keyword">if</span> flag <span class="keyword">then</span> inc(s[t].sum,p) <span class="keyword">else</span> dec(s[t].sum,p);</span><br><span class="line">  <span class="keyword">if</span> l=r <span class="keyword">then</span> <span class="keyword">exit</span>;</span><br><span class="line">  mid:=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> p&lt;=mid <span class="keyword">then</span> insert(s[t].lc,s[base].lc,p,l,mid,flag) <span class="keyword">else</span> insert(s[t].rc,s[base].rc,p,mid+<span class="number">1</span>,r,flag);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">query</span><span class="params">(t,l,r,p:longint)</span>:</span>int64;</span><br><span class="line"><span class="keyword">var</span> mid:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">if</span> l=r <span class="keyword">then</span> <span class="keyword">exit</span>(l*min(s[t].size,p));</span><br><span class="line">  mid:=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> p=s[s[t].lc].size <span class="keyword">then</span> <span class="keyword">exit</span>(s[s[t].lc].sum);</span><br><span class="line">  <span class="keyword">if</span> p&lt;=s[s[t].lc].size <span class="keyword">then</span> <span class="keyword">exit</span>(query(s[t].lc,l,mid,p)) <span class="keyword">else</span> <span class="keyword">exit</span>(s[s[t].lc].sum+query(s[t].rc,mid+<span class="number">1</span>,r,p-s[s[t].lc].size));</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  readln(m,n);</span><br><span class="line">  maxp:=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> m <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    readln(a,b,c);</span><br><span class="line">    q[i&lt;&lt;<span class="number">1</span>-<span class="number">1</span>].st:=a;</span><br><span class="line">    q[i&lt;&lt;<span class="number">1</span>-<span class="number">1</span>].p:=c;</span><br><span class="line">    q[i&lt;&lt;<span class="number">1</span>-<span class="number">1</span>].flag:=true;</span><br><span class="line">    q[i&lt;&lt;<span class="number">1</span>].st:=b+<span class="number">1</span>;</span><br><span class="line">    q[i&lt;&lt;<span class="number">1</span>].p:=c;</span><br><span class="line">    q[i&lt;&lt;<span class="number">1</span>].flag:=false;</span><br><span class="line">    <span class="keyword">if</span> c&gt;maxp <span class="keyword">then</span> maxp:=c;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  qsort(<span class="number">1</span>,m&lt;&lt;<span class="number">1</span>);</span><br><span class="line">  tot:=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> q[<span class="number">1</span>].st <span class="keyword">do</span> root[i]:=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> m&lt;&lt;<span class="number">1</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    insert(root[q[i].st],root[q[i].st],q[i].p,<span class="number">1</span>,maxp,q[i].flag);</span><br><span class="line">    <span class="keyword">if</span> i&lt;m&lt;&lt;<span class="number">1</span> <span class="keyword">then</span> <span class="keyword">for</span> j:=q[i].st <span class="keyword">to</span> q[i+<span class="number">1</span>].st <span class="keyword">do</span> root[j]:=root[q[i].st];</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  ans:=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    readln(x,a,b,c);</span><br><span class="line">    k:=<span class="number">1</span>+(a*ans+b)<span class="keyword">mod</span> c;</span><br><span class="line">    ans:=query(root[x],<span class="number">1</span>,maxp,k);</span><br><span class="line">    writeln(ans);</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>还是太naive…</p>
</blockquote>]]>
    
    </summary>
    
      <category term="Segment Tree" scheme="http://platypuspro.github.io/tags/Segment-Tree/"/>
    
      <category term="BZOJ" scheme="http://platypuspro.github.io/categories/BZOJ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[BZOJ 3931]]></title>
    <link href="http://platypuspro.github.io/posts/bzoj-3931/"/>
    <id>http://platypuspro.github.io/posts/bzoj-3931/</id>
    <published>2015-04-09T13:37:01.000Z</published>
    <updated>2015-04-10T04:54:52.000Z</updated>
    <content type="html"><![CDATA[<p><i class="fa fa-tasks"></i><br><a id="more"></a><br><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3931" target="_blank" rel="external">传送门</a></p>
<p><del>BZOJ上又没贴题…</del></p>
<h3 id="题目描述">题目描述</h3><p>路由是指通过计算机网络把信息从源地址传输到目的地址的活动，也是计算机网络设计中的重点和难点。网络中实现路由转发的硬件设备称为路由器。为了使数据包最快的到达目的地，路由器需要选择最优的路径转发数据包。例如，在常用的路由算法OSPF(开放式最短路径优先)中，路由器会使用经典的Dijkstra算法计算最短路径，然后尽量沿最短路径转发数据包。<br>现在，若已知一个计算机网络中各路由器间的连接情况，以及各个路由器的最大吞吐量（即每秒能转发的数据包数量），假设所有数据包一定沿最短路径转发，试计算从路由器$1$到路由器$n$的网络的最大吞吐量。计算中忽略转发及传输的时间开销，不考虑链路的带宽限制，即认为数据包可以瞬间通过网络。路由器$1$到路由器$n$作为起点和终点，自身的吞吐量不用考虑，网络上也不存在将$1$和$n$直接相连的链路。</p>
<h3 id="输入格式">输入格式</h3><p>输入文件第一行包含两个空格分开的正整数$n$和$m$，分别表示路由器数量和链路的数量。网络中的路由器使用$1$到$n$编号。<br>接下来$m$行，每行包含三个空格分开的正整数$a$、$b$和$d$，表示从路由器$a$到路由器$b$存在一条距离为$d$的双向链路。<br>接下来$n$行，每行包含一个正整数$c$，分别给出每一个路由器的吞吐量。</p>
<h3 id="输出格式">输出格式</h3><p>输出一个整数，为题目所求吞吐量。</p>
<h3 id="输入样例">输入样例</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">7 10</span><br><span class="line">1 2 2</span><br><span class="line">1 5 2</span><br><span class="line">2 4 1</span><br><span class="line">2 3 3</span><br><span class="line">3 7 1</span><br><span class="line">4 5 4</span><br><span class="line">4 3 1</span><br><span class="line">4 6 1</span><br><span class="line">5 6 2</span><br><span class="line">6 7 1</span><br><span class="line">1</span><br><span class="line">00</span><br><span class="line">20</span><br><span class="line">50</span><br><span class="line">20</span><br><span class="line">60</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<h3 id="输出样例">输出样例</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">70</span><br></pre></td></tr></table></figure>
<h3 id="样例解释">样例解释</h3><p><img src="http://i1.tietuku.com/4e49691e7c20f9b9.png" alt=""></p>
<h3 id="数据范围">数据范围</h3><p>对于$30%$的数据，$n\leq 100,m\leq 1000$<br>对于$100%$的数据，$n\leq 500,m\leq 100000,d,c\leq 10^9$</p>
<blockquote>
<p>Q: 比裸题更裸的是什么？<br>A: BZOJ 3931</p>
</blockquote>
<p>先一正一反两遍最短路</p>
<p>然后对于某条边，若$1$到它的一个端点的距离与它的另一个端点到$n$的距离之和再加上这条边的长度等于$1$到$n$的长度的话，(也就是说$dis_{1,a}+dis_{b,n}+dis_{a,b}=dis_{1,n}$)，说明这条边属于最短路图</p>
<p>这样搞出最短路图，然后拆点裸上最大流就是答案</p>
<p><i class="fa fa-code fa-2x"></i></p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">program</span> bzoj_3931;</span><br><span class="line"><span class="keyword">const</span> inf=maxlongint&lt;&lt;<span class="number">16</span>;</span><br><span class="line"><span class="keyword">var</span> d:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">2</span>,<span class="number">1</span>..<span class="number">500</span>]<span class="keyword">of</span> longint;</span><br><span class="line">    l,ll:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">200000</span>]<span class="keyword">of</span> <span class="keyword">record</span> ed,pre:longint; f:int64; <span class="keyword">end</span>;</span><br><span class="line">    n,m,i,tot,a,b,c,k,ss,tt:longint;</span><br><span class="line">    lst,st:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">1000</span>]<span class="keyword">of</span> longint;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">min</span><span class="params">(a,b:int64)</span>:</span>int64;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">if</span> a&lt;b <span class="keyword">then</span> <span class="keyword">exit</span>(a) <span class="keyword">else</span> <span class="keyword">exit</span>(b);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">link</span><span class="params">(a,b:longint;d:int64)</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  inc(tot);</span><br><span class="line">  ll[tot].pre:=lst[a];</span><br><span class="line">  lst[a]:=tot;</span><br><span class="line">  ll[tot].ed:=b;</span><br><span class="line">  ll[tot].f:=d;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">insert</span><span class="params">(a,b:longint;f:int64)</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  inc(tot);</span><br><span class="line">  l[tot].pre:=st[a];</span><br><span class="line">  st[a]:=tot;</span><br><span class="line">  l[tot].ed:=b;</span><br><span class="line">  l[tot].f:=f;</span><br><span class="line">  inc(tot);</span><br><span class="line">  l[tot].pre:=st[b];</span><br><span class="line">  st[b]:=tot;</span><br><span class="line">  l[tot].ed:=a;</span><br><span class="line">  l[tot].f:=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">spfa</span><span class="params">(t,st:longint)</span>;</span></span><br><span class="line"><span class="keyword">const</span> qs=<span class="number">500</span>;</span><br><span class="line"><span class="keyword">var</span> q:<span class="keyword">array</span>[<span class="number">1</span>..qs]<span class="keyword">of</span> longint;</span><br><span class="line">    v:<span class="keyword">array</span>[<span class="number">1</span>..qs]<span class="keyword">of</span> boolean;</span><br><span class="line">    hd,tl,k:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  hd:=<span class="number">0</span>;</span><br><span class="line">  tl:=<span class="number">1</span>;</span><br><span class="line">  d[t,st]:=<span class="number">0</span>;</span><br><span class="line">  q[<span class="number">1</span>]:=st;</span><br><span class="line">  fillchar(v,sizeof(v),false);</span><br><span class="line">  v[st]:=true;</span><br><span class="line">  <span class="keyword">while</span> hd&lt;&gt;tl <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    inc(hd);</span><br><span class="line">    <span class="keyword">if</span> hd&gt;qs <span class="keyword">then</span> hd:=<span class="number">1</span>;</span><br><span class="line">    k:=lst[q[hd]];</span><br><span class="line">    <span class="keyword">while</span> k&lt;&gt;<span class="number">0</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      <span class="keyword">if</span> d[t,q[hd]]+ll[k].f&lt;d[t,ll[k].ed] <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">begin</span></span><br><span class="line">        d[t,ll[k].ed]:=d[t,q[hd]]+ll[k].f;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> v[ll[k].ed] <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">          v[ll[k].ed]:=true;</span><br><span class="line">          inc(tl);</span><br><span class="line">          <span class="keyword">if</span> tl&gt;qs <span class="keyword">then</span> tl:=<span class="number">1</span>;</span><br><span class="line">          q[tl]:=ll[k].ed;</span><br><span class="line">        <span class="keyword">end</span>;</span><br><span class="line">      <span class="keyword">end</span>;</span><br><span class="line">      k:=ll[k].pre;</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">    v[q[hd]]:=false;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">push_flow</span>;</span></span><br><span class="line"><span class="keyword">const</span> qs=<span class="number">10000</span>;</span><br><span class="line"><span class="keyword">var</span> h,e:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">1000</span>]<span class="keyword">of</span> int64;</span><br><span class="line">    q:<span class="keyword">array</span>[<span class="number">1</span>..qs]<span class="keyword">of</span> longint;</span><br><span class="line">    hd,tl,k:longint;</span><br><span class="line">    maxf,f:int64;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  fillchar(h,sizeof(h),<span class="number">0</span>);</span><br><span class="line">  fillchar(e,sizeof(e),<span class="number">0</span>);</span><br><span class="line">  fillchar(q,sizeof(q),<span class="number">0</span>);</span><br><span class="line">  maxf:=<span class="number">0</span>;</span><br><span class="line">  e[ss]:=inf;</span><br><span class="line">  e[tt]:=-inf;</span><br><span class="line">  h[ss]:=tt;</span><br><span class="line">  hd:=<span class="number">0</span>;</span><br><span class="line">  tl:=<span class="number">1</span>;</span><br><span class="line">  q[<span class="number">1</span>]:=ss;</span><br><span class="line">  <span class="keyword">while</span> hd&lt;&gt;tl <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    inc(hd);</span><br><span class="line">    <span class="keyword">if</span> hd&gt;qs <span class="keyword">then</span> hd:=<span class="number">1</span>;</span><br><span class="line">    k:=st[q[hd]];</span><br><span class="line">    <span class="keyword">while</span> k&lt;&gt;<span class="number">0</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      <span class="keyword">while</span> (e[q[hd]]&gt;<span class="number">0</span>)<span class="keyword">and</span>(l[k].f&gt;<span class="number">0</span>)<span class="keyword">and</span>((q[hd]=ss)<span class="keyword">or</span>(h[q[hd]]=h[l[k].ed]+<span class="number">1</span>)) <span class="keyword">do</span></span><br><span class="line">      <span class="keyword">begin</span></span><br><span class="line">        f:=min(e[q[hd]],l[k].f);</span><br><span class="line">        dec(e[q[hd]],f);</span><br><span class="line">        inc(e[l[k].ed],f);</span><br><span class="line">        dec(l[k].f,f);</span><br><span class="line">        inc(l[k xor <span class="number">1</span>].f,f);</span><br><span class="line">        <span class="keyword">if</span> l[k].ed=tt <span class="keyword">then</span> inc(maxf,f);</span><br><span class="line">        <span class="keyword">if</span> (l[k].ed&lt;&gt;ss)<span class="keyword">and</span>(l[k].ed&lt;&gt;tt) <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">          inc(tl);</span><br><span class="line">          <span class="keyword">if</span> tl&gt;qs <span class="keyword">then</span> tl:=<span class="number">1</span>;</span><br><span class="line">          q[tl]:=l[k].ed;</span><br><span class="line">        <span class="keyword">end</span>;</span><br><span class="line">      <span class="keyword">end</span>;</span><br><span class="line">      k:=l[k].pre;</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">    <span class="keyword">if</span> (e[q[hd]]&gt;<span class="number">0</span>)<span class="keyword">and</span>(q[hd]&lt;&gt;ss)<span class="keyword">and</span>(q[hd]&lt;&gt;tt) <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      inc(h[q[hd]]);</span><br><span class="line">      inc(tl);</span><br><span class="line">      <span class="keyword">if</span> tl&gt;qs <span class="keyword">then</span> tl:=<span class="number">1</span>;</span><br><span class="line">      q[tl]:=q[hd];</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  writeln(maxf);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  readln(n,m);</span><br><span class="line">  tot:=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> m <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    readln(a,b,c);</span><br><span class="line">    link(a,b,c);</span><br><span class="line">    link(b,a,c);</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  fillchar(d,sizeof(d),$<span class="number">3</span>f);</span><br><span class="line">  spfa(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">  spfa(<span class="number">2</span>,n);</span><br><span class="line">  tot:=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    k:=lst[i];</span><br><span class="line">    <span class="keyword">while</span> k&lt;&gt;<span class="number">0</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      <span class="keyword">if</span> d[<span class="number">1</span>,i]+ll[k].f+d[<span class="number">2</span>,ll[k].ed]=d[<span class="number">1</span>,n] <span class="keyword">then</span> insert(i&lt;&lt;<span class="number">1</span>,ll[k].ed&lt;&lt;<span class="number">1</span>-<span class="number">1</span>,inf&gt;&gt;<span class="number">8</span>);</span><br><span class="line">      k:=ll[k].pre;</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    readln(c);</span><br><span class="line">    <span class="keyword">if</span> (i&lt;&gt;<span class="number">1</span>)<span class="keyword">and</span>(i&lt;&gt;n) <span class="keyword">then</span> insert(i&lt;&lt;<span class="number">1</span>-<span class="number">1</span>,i&lt;&lt;<span class="number">1</span>,c);</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  ss:=<span class="number">2</span>;</span><br><span class="line">  tt:=n&lt;&lt;<span class="number">1</span>-<span class="number">1</span>;</span><br><span class="line">  push_flow;</span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p><i class="fa fa-tasks"></i><br>]]>
    
    </summary>
    
      <category term="Max Flow" scheme="http://platypuspro.github.io/tags/Max-Flow/"/>
    
      <category term="Shortest Path" scheme="http://platypuspro.github.io/tags/Shortest-Path/"/>
    
      <category term="BZOJ" scheme="http://platypuspro.github.io/categories/BZOJ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[BZOJ 3930]]></title>
    <link href="http://platypuspro.github.io/posts/bzoj-3930/"/>
    <id>http://platypuspro.github.io/posts/bzoj-3930/</id>
    <published>2015-04-09T07:59:37.000Z</published>
    <updated>2015-04-09T11:29:44.000Z</updated>
    <content type="html"><![CDATA[<p><i class="fa fa-bookmark"></i><br><a id="more"></a><br><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3930" target="_blank" rel="external">传送门</a></p>
<p>Orz伟大领袖<a href="http://lzy-foenix.gitcafe.io/2015/04/09/BZOJ-3930-CQOI2015-%E9%80%89%E6%95%B0/" target="_blank" rel="external">lzy</a></p>
<p><del>BZOJ题被X了…我把题贴出来好了…</del></p>
<h3 id="题目描述">题目描述</h3><p>我们知道，从区间$[L,H]$（$L$和$H$为整数）中选取$N$个整数，总共有$(H-L+1)^N$种方案。小z很好奇这样选出的数的最大公约数的规律，他决定对每种方案选出的$N$个整数都求一次最大公约数，以便进一步研究。然而他很快发现工作量太大了，于是向你寻求帮助。<br>你的任务很简单，小z会告诉你一个整数$K$，你需要回答他最大公约数刚好为$K$的选取方案有多少个。由于方案数较大，你只需要输出其除以$1000000007$的余数即可。</p>
<h3 id="输入格式">输入格式</h3><p>输入一行，包含4个空格分开的正整数，依次为$N,K,L,H$</p>
<h3 id="输出格式">输出格式</h3><p>输出一个整数，为所求方案数。</p>
<h3 id="输入样例">输入样例</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 2 2 4</span><br></pre></td></tr></table></figure>
<h3 id="输出样例">输出样例</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>
<h3 id="样例解释">样例解释</h3><p>所有可能的选择方案：$(2,2),(2,3),(2,4),(3,2),(3,3),(3,4),(4,2),(4,3),(4,4)$<br>其中最大公约数等于$2$的只有$3$组：$(2,2),(2,4),(4,2)$</p>
<h3 id="数据范围">数据范围</h3><p>对于$30%$的数据，$N\leq 5，H-L\leq 5$<br>对于$100%$的数据，$1\leq N,K\leq 10^9,1\leq L\leq H\leq 10^9,H-L\leq 10^5$</p>
<p>从$[L,H]$中取$n$个数，设这$n$个数为$a_1,a_2,\cdots,a_n$,设</p>
<h4 id="$$F(k)=\sum_{a_1=L}^H_\sum_{a_2=L}^H_\cdots_\sum_{a_n=L}^H=[k_\mid_gcd(a_1,a_2,\cdots,a_n)]$$">$$F(k)=\sum_{a_1=L}^H \sum_{a_2=L}^H \cdots \sum_{a_n=L}^H=[k \mid gcd(a_1,a_2,\cdots,a_n)]$$</h4><h4 id="$$f(k)=\sum_{a_1=L}^H_\sum_{a_2=L}^H_\cdots_\sum_{a_n=L}^H=[k=gcd(a_1,a_2,\cdots,a_n)]$$">$$f(k)=\sum_{a_1=L}^H \sum_{a_2=L}^H \cdots \sum_{a_n=L}^H=[k=gcd(a_1,a_2,\cdots,a_n)]$$</h4><p>那么</p>
<h4 id="$$F(k)=\sum_{d_\mid_k}f(d)$$">$$F(k)=\sum_{d \mid k}f(d)$$</h4><h4 id="$$f(k)=\sum_{k_\mid_d}\mu(\frac{d}{k})F(d)$$">$$f(k)=\sum_{k \mid d}\mu(\frac{d}{k})F(d)$$</h4><p>然后搞一搞$F(k)$</p>
<h4 id="$$F(k)=\sum_{a_1=\lfloor\frac{L-1}{k}\rfloor}^{\lfloor\frac{H}{k}\rfloor}_\sum_{a_2=\lfloor\frac{L-1}{k}\rfloor}^{\lfloor\frac{H}{k}\rfloor}_\cdots_\sum_{a_n=\lfloor\frac{L-1}{k}\rfloor}^{\lfloor\frac{H}{k}\rfloor}[1_\mid_gcd(a_1,a_2,\cdots,a_n)]$$">$$F(k)=\sum_{a_1=\lfloor\frac{L-1}{k}\rfloor}^{\lfloor\frac{H}{k}\rfloor} \sum_{a_2=\lfloor\frac{L-1}{k}\rfloor}^{\lfloor\frac{H}{k}\rfloor} \cdots \sum_{a_n=\lfloor\frac{L-1}{k}\rfloor}^{\lfloor\frac{H}{k}\rfloor}[1 \mid gcd(a_1,a_2,\cdots,a_n)]$$</h4><h4 id="$$F(k)=(\lfloor\frac{H}{k}\rfloor-\lfloor\frac{L-1}{k}\rfloor)^n$$">$$F(k)=(\lfloor\frac{H}{k}\rfloor-\lfloor\frac{L-1}{k}\rfloor)^n$$</h4><p>然后</p>
<h4 id="$$f(k)=\sum_{d’=1}^{\lfloor\frac{H}{k}\rfloor}\mu(d’)(\lfloor\frac{H}{d’\cdot_k}\rfloor-\lfloor\frac{L-1}{d’\cdot_k}\rfloor)^n$$">$$f(k)=\sum_{d’=1}^{\lfloor\frac{H}{k}\rfloor}\mu(d’)(\lfloor\frac{H}{d’\cdot k}\rfloor-\lfloor\frac{L-1}{d’\cdot k}\rfloor)^n$$</h4><p>直接求当然会挂的很惨…</p>
<p>对此，<a href="http://blog.csdn.net/popoqqq/article/details/44917831" target="_blank" rel="external">PoPoQQQ的解法</a>是搞$\mu$的前缀和然后搞个阈值然后blabla…</p>
<p>然而…<a href="http://lzy-foenix.gitcafe.io/2015/04/09/BZOJ-3930-CQOI2015-%E9%80%89%E6%95%B0/" target="_blank" rel="external">lzy</a>早已看透了一切…</p>
<blockquote>
<p>后面那一坨是会出现很多$0$的，所以我们把$=0$的部分跳过去，光计算不等于$0$的时候的$\mu$值，直接用$\mu$的定义来算，而在极限数据中不等于$0$的最多就有$5w$个，所以这样的效率是$O(n^{1/2}+(5w)^{3/2})$效率是$0.2s$左右。  ——lzy</p>
</blockquote>
<p>跪烂了Orz…</p>
<p><i class="fa fa-code fa-2x"></i></p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">program</span> bzoj_3930;</span><br><span class="line"><span class="keyword">const</span> mo=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">var</span> n,k,l,h:int64;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">min</span><span class="params">(a,b:int64)</span>:</span>int64;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">if</span> a&lt;b <span class="keyword">then</span> <span class="keyword">exit</span>(a) <span class="keyword">else</span> <span class="keyword">exit</span>(b);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qp</span><span class="params">(x,k:int64)</span>:</span>int64;</span><br><span class="line"><span class="keyword">var</span> p:int64;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  p:=x;</span><br><span class="line">  qp:=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> k&lt;&gt;<span class="number">0</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span> k <span class="keyword">and</span> <span class="number">1</span>=<span class="number">1</span> <span class="keyword">then</span> qp:=(qp*p)<span class="keyword">mod</span> mo;</span><br><span class="line">    p:=(p*p)<span class="keyword">mod</span> mo;</span><br><span class="line">    k:=k&gt;&gt;<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mu</span><span class="params">(x:longint)</span>:</span>longint;</span><br><span class="line"><span class="keyword">var</span> i:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  mu:=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">2</span> <span class="keyword">to</span> trunc(sqrt(x)) <span class="keyword">do</span> <span class="keyword">while</span> x <span class="keyword">mod</span> i=<span class="number">0</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    x:=x <span class="keyword">div</span> i;</span><br><span class="line">    mu:=-mu;</span><br><span class="line">    <span class="keyword">if</span> x <span class="keyword">mod</span> i=<span class="number">0</span> <span class="keyword">then</span> <span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">if</span> x&lt;&gt;<span class="number">1</span> <span class="keyword">then</span> mu:=-mu;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">calc</span>;</span></span><br><span class="line"><span class="keyword">var</span> i:longint;</span><br><span class="line">    ans,q:int64;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  ans:=<span class="number">0</span>;</span><br><span class="line">  i:=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> i&lt;=h <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    q:=qp(h <span class="keyword">div</span>(i*k)-(l-<span class="number">1</span>)<span class="keyword">div</span>(i*k),n);</span><br><span class="line">    <span class="keyword">if</span> q&lt;&gt;<span class="number">0</span> <span class="keyword">then</span> ans:=(ans+mu(i)*q+mo)<span class="keyword">mod</span> mo <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span> (l-<span class="number">1</span>)<span class="keyword">div</span> i&lt;&gt;<span class="number">0</span> <span class="keyword">then</span> i:=min(h <span class="keyword">div</span>(h <span class="keyword">div</span> i),(l-<span class="number">1</span>)<span class="keyword">div</span>((l-<span class="number">1</span>)<span class="keyword">div</span> i)) <span class="keyword">else</span> i:=h <span class="keyword">div</span>(h <span class="keyword">div</span> i);</span><br><span class="line">    inc(i);</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  writeln(ans);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  readln(n,k,l,h);</span><br><span class="line">  calc;</span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p><i class="fa fa-bookmark"></i><br>]]>
    
    </summary>
    
      <category term="Math" scheme="http://platypuspro.github.io/tags/Math/"/>
    
      <category term="Mobius_inversion" scheme="http://platypuspro.github.io/tags/Mobius-inversion/"/>
    
      <category term="BZOJ" scheme="http://platypuspro.github.io/categories/BZOJ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[BZOJ 2301]]></title>
    <link href="http://platypuspro.github.io/posts/bzoj-2301/"/>
    <id>http://platypuspro.github.io/posts/bzoj-2301/</id>
    <published>2015-04-08T11:22:15.000Z</published>
    <updated>2015-04-08T13:19:30.000Z</updated>
    <content type="html"><![CDATA[<p><i class="fa fa-rocket fa-spin"></i><br><a id="more"></a><br><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2301" target="_blank" rel="external">传送门</a></p>
<p>先贴点资料 <del>然后跑</del></p>
<p><a href="http://zh.wikipedia.org/wiki/%E9%BB%98%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94%E5%85%AC%E5%BC%8F" target="_blank" rel="external">莫比乌斯反演</a></p>
<p><a href="http://zh.wikipedia.org/wiki/%E9%BB%98%E6%AF%94%E4%B9%8C%E6%96%AF%E5%87%BD%E6%95%B0" target="_blank" rel="external">莫比乌斯函数</a></p>
<p><a href="https://www.zybuluo.com/ZYK1997/note/83900" target="_blank" rel="external">Orz ZYK</a></p>
<p>题目要求$x\in[a,b]\ y\in[c,d]$的结果，根据容斥原理可知其实就是求$(x\in[1,b]\ y\in[1,d])+(x\in[1,a-1]\ y\in[1,c-1])-(x\in[1,a-1]\ y\in[c,d])-(x\in[a,b]\ y\in[1,c-1])$的结果</p>
<p>既然是莫XXX<del>繁衍</del>反演，就要搞两个函数出来 <del>(ZYK:你不证明怎么能用呢！)</del></p>
<p>设</p>
<h4 id="$$F(d)=\sum_{i=1}^n\sum_{j=1}^m[d\mid_gcd(i,j)]$$">$$F(d)=\sum_{i=1}^n\sum_{j=1}^m[d\mid gcd(i,j)]$$</h4><h4 id="$$f(d)=\sum_{i=1}^n\sum_{j=1}^m[d=gcd(i,j)]$$">$$f(d)=\sum_{i=1}^n\sum_{j=1}^m[d=gcd(i,j)]$$</h4><p>那么</p>
<h4 id="$$F(n)=\sum_{d\mid_n}_f(d)$$">$$F(n)=\sum_{d\mid n} f(d)$$</h4><p><del>求详细解释者请自行@ZYK1997</del></p>
<p>根据反演公式</p>
<h4 id="$$f(n)=\sum_{d\mid_n}\mu(d)F(\frac{n}{d})$$">$$f(n)=\sum_{d\mid n}\mu(d)F(\frac{n}{d})$$</h4><p>然后换个元$(d’=\frac{n}{d})$，得</p>
<h4 id="$$f(n)=\sum_{n\mid_d’}\mu(\frac{d’}{n})F(d’)$$">$$f(n)=\sum_{n\mid d’}\mu(\frac{d’}{n})F(d’)$$</h4><p>题目要求的东西搞定了，回过头看看$F(d)$怎么搞</p>
<h4 id="$$F(d)=\sum_{i=1}^n\sum_{j=1}^m[d\mid_gcd(i,j)]$$-1">$$F(d)=\sum_{i=1}^n\sum_{j=1}^m[d\mid gcd(i,j)]$$</h4><h4 id="$$F(d)=\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{d}\rfloor}[1\mid_gcd(i,j)]$$">$$F(d)=\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{j=1}^{\lfloor\frac{m}{d}\rfloor}[1\mid gcd(i,j)]$$</h4><p>(这一步我脑补了好久 = =)</p>
<h4 id="$$F(d)=\lfloor\frac{n}{d}\rfloor\cdot\lfloor\frac{m}{d}\rfloor$$">$$F(d)=\lfloor\frac{n}{d}\rfloor\cdot\lfloor\frac{m}{d}\rfloor$$</h4><p>$F(d)$也弄完了，下面看看怎么搞$\mu$(其实和筛法求$\varphi$的过程很相似…<del>所以我就不讲了 具体看代码吧2333</del>)</p>
<p>最后的$f(k)$大概是这样</p>
<h4 id="$$f(k)=\sum_{i=1}^{\lfloor\frac{min(n,m)}{k}\rfloor}\mu(i)\lfloor\frac{n}{i\cdot_k}\rfloor\lfloor\frac{m}{i\cdot_k}\rfloor$$">$$f(k)=\sum_{i=1}^{\lfloor\frac{min(n,m)}{k}\rfloor}\mu(i)\lfloor\frac{n}{i\cdot k}\rfloor\lfloor\frac{m}{i\cdot k}\rfloor$$</h4><p>但是只靠这一个式子会TLE <del>BZOJ我又卡了你1min我错了QAQ</del></p>
<p>因为后面那一坨下取整在某一段区间内的值是一定的，所以把每一段搞成$\mu$在这一段的和乘上这一段的值</p>
<p>以上求的是$x\in[1,n]\ y\in[1,m]$的$f(k)$，这样答案就可以搞出来了</p>
<blockquote>
<p>不注意int64会WA…</p>
</blockquote>
<p><i class="fa fa-code fa-2x"></i></p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">program</span> bzoj_2301;</span><br><span class="line"><span class="keyword">const</span> maxn=<span class="number">50000</span>;</span><br><span class="line"><span class="keyword">var</span> prime:<span class="keyword">array</span>[<span class="number">1</span>..maxn]<span class="keyword">of</span> boolean;</span><br><span class="line">    sieve,mu:<span class="keyword">array</span>[<span class="number">0</span>..maxn]<span class="keyword">of</span> longint;</span><br><span class="line">    n,i,a,b,c,d,k,tot:longint;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">min</span><span class="params">(a,b:longint)</span>:</span>longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">if</span> a&lt;b <span class="keyword">then</span> <span class="keyword">exit</span>(a) <span class="keyword">else</span> <span class="keyword">exit</span>(b);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">init_mu</span>;</span></span><br><span class="line"><span class="keyword">var</span> i,j:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  fillchar(prime,sizeof(prime),true);</span><br><span class="line">  tot:=<span class="number">0</span>;</span><br><span class="line">  mu[<span class="number">1</span>]:=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">2</span> <span class="keyword">to</span> maxn <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span> prime[i] <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      inc(tot);</span><br><span class="line">      sieve[tot]:=i;</span><br><span class="line">      mu[i]:=-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">    <span class="keyword">for</span> j:=<span class="number">1</span> <span class="keyword">to</span> tot <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      <span class="keyword">if</span> i*sieve[j]&gt;maxn <span class="keyword">then</span> break;</span><br><span class="line">      prime[i*sieve[j]]:=false;</span><br><span class="line">      <span class="keyword">if</span> i <span class="keyword">mod</span> sieve[j]=<span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">begin</span></span><br><span class="line">        mu[i*sieve[j]]:=<span class="number">0</span>;</span><br><span class="line">        break;</span><br><span class="line">      <span class="keyword">end</span> <span class="keyword">else</span> mu[i*sieve[j]]:=-mu[i];</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">2</span> <span class="keyword">to</span> maxn <span class="keyword">do</span> inc(mu[i],mu[i-<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solve</span><span class="params">(a,b:longint)</span>:</span>int64;</span><br><span class="line"><span class="keyword">var</span> d,i,j:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  a:=a <span class="keyword">div</span> k;</span><br><span class="line">  b:=b <span class="keyword">div</span> k;</span><br><span class="line">  d:=min(a,b);</span><br><span class="line">  solve:=<span class="number">0</span>;</span><br><span class="line">  i:=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> i&lt;=d <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    j:=min(a <span class="keyword">div</span>(a <span class="keyword">div</span> i),b <span class="keyword">div</span>(b <span class="keyword">div</span> i));</span><br><span class="line">    inc(solve,(mu[j]-mu[i-<span class="number">1</span>])*int64(a <span class="keyword">div</span> i)*int64(b <span class="keyword">div</span> i));</span><br><span class="line">    i:=j+<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  readln(n);</span><br><span class="line">  init_mu;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    readln(a,b,c,d,k);</span><br><span class="line">    writeln(solve(b,d)+solve(a-<span class="number">1</span>,c-<span class="number">1</span>)-solve(b,c-<span class="number">1</span>)-solve(a-<span class="number">1</span>,d));</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p><i class="fa fa-rocket fa-spin"></i><br>]]>
    
    </summary>
    
      <category term="Math" scheme="http://platypuspro.github.io/tags/Math/"/>
    
      <category term="Mobius_inversion" scheme="http://platypuspro.github.io/tags/Mobius-inversion/"/>
    
      <category term="BZOJ" scheme="http://platypuspro.github.io/categories/BZOJ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[BZOJ 3560]]></title>
    <link href="http://platypuspro.github.io/posts/bzoj-3560/"/>
    <id>http://platypuspro.github.io/posts/bzoj-3560/</id>
    <published>2015-04-03T10:14:12.000Z</published>
    <updated>2015-04-03T12:53:24.000Z</updated>
    <content type="html"><![CDATA[<p><i class="fa fa-space-shuttle"></i> <i class="fa fa-times-circle"></i> <i class="fa fa-space-shuttle fa-flip-horizontal"></i><br><a id="more"></a><br><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3560" target="_blank" rel="external">传送门</a></p>
<p>Orz <a href="http://blog.csdn.net/popoqqq/article/details/42739963" target="_blank" rel="external">PoPoQQQ</a> <del>里面似乎有些错误的说</del></p>
<p>首先把每个$a_i$分解质因数，分解成各个质因子的次幂相乘</p>
<p>假设分解后某个质数$p$在每个$a_i$中的次数分别是$b_i$，那么$p$对答案的贡献就是 (注意:这个式子及以下的式子仅对于<strong>一个</strong>质数$p$而言)</p>
<h2 id="$$\sum_{i_1=0}^{b_1}\sum_{i_2=0}^{b_2}\cdots_\sum_{i_n=0}^{b_n}\varphi(p^{\sum_{j=1}^n_i_j})$$">$$\sum_{i_1=0}^{b_1}\sum_{i_2=0}^{b_2}\cdots \sum_{i_n=0}^{b_n}\varphi(p^{\sum_{j=1}^n i_j})$$</h2><p>例如对于样例数据$6,10,15$，将三个数中的质因数$2,3,5$分开以后所有情况如下表所示</p>
<table>
<thead>
<tr>
<th style="text-align:center">2</th>
<th style="text-align:center">3</th>
<th style="text-align:center">5</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">$2^0 2^0 2^0$</td>
<td style="text-align:center">$3^0 3^0 3^0$</td>
<td style="text-align:center">$5^0 5^0 5^0$</td>
</tr>
<tr>
<td style="text-align:center">$2^0 2^0 2^1$</td>
<td style="text-align:center">$3^0 3^0 3^1$</td>
<td style="text-align:center">$5^0 5^0 5^1$</td>
</tr>
<tr>
<td style="text-align:center">$2^0 2^1 2^0$</td>
<td style="text-align:center">$3^1 3^0 3^0$</td>
<td style="text-align:center">$5^0 5^1 5^0$</td>
</tr>
<tr>
<td style="text-align:center">$2^0 2^1 2^1$</td>
<td style="text-align:center">$3^1 3^0 3^1$</td>
<td style="text-align:center">$5^0 5^1 5^1$</td>
</tr>
</tbody>
</table>
<p>三列中每列挑一个三元组组合起来就是一组合法解 例如第一列第三行 第二列第一行 第三列第四行组合起来就是$(1,10,5)$</p>
<p>上表对应的$\varphi$为</p>
<table>
<thead>
<tr>
<th style="text-align:center">2</th>
<th style="text-align:center">3</th>
<th style="text-align:center">5</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">$\varphi(1)=1$</td>
<td style="text-align:center">$\varphi(1)=1$</td>
<td style="text-align:center">$\varphi(1)=1$</td>
</tr>
<tr>
<td style="text-align:center">$\varphi(2)=1$</td>
<td style="text-align:center">$\varphi(3)=2$</td>
<td style="text-align:center">$\varphi(5)=4$</td>
</tr>
<tr>
<td style="text-align:center">$\varphi(2)=1$</td>
<td style="text-align:center">$\varphi(3)=2$</td>
<td style="text-align:center">$\varphi(5)=4$</td>
</tr>
<tr>
<td style="text-align:center">$\varphi(4)=2$</td>
<td style="text-align:center">$\varphi(9)=6$</td>
<td style="text-align:center">$\varphi(25)=20$</td>
</tr>
</tbody>
</table>
<p>因为$\varphi$是积性函数且质因数肯定两两互质，所以这些$\varphi$是可以直接相乘的，对于$(1,10,5)$的答案就是$1*1*20=20$</p>
<p>所以就得到了上面那个式子</p>
<p>根据$\varphi(x^k)=\varphi(x)*x^{k-1}=(x-1)*x^{k-1}\ (x为质数且k\geq 1)$变形一下，原式搞成</p>
<h2 id="$$((\sum_{i_1=0}^{b_1}\sum_{i_2=0}^{b_2}\cdots_\sum_{i_n=0}^{b_n}p^{\sum_{j=1}^n_i_j})-1)\times_\frac{p-1}{p}+1$$">$$((\sum_{i_1=0}^{b_1}\sum_{i_2=0}^{b_2}\cdots \sum_{i_n=0}^{b_n}p^{\sum_{j=1}^n i_j})-1)\times \frac{p-1}{p}+1$$</h2><p>其中$-1再+1$是为了特判$p$的指数为$0$的情况</p>
<p>然后继续搞一搞，搞成</p>
<h2 id="$$((\prod_{i=1}^n_\sum_{j=0}^{b_i}_p^j)-1)\times_\frac{p-1}{p}+1$$">$$((\prod_{i=1}^n \sum_{j=0}^{b_i} p^j)-1)\times \frac{p-1}{p}+1$$</h2><p>咦,只跟当前的$p$有关耶,而且$p^j$似乎可以预处理吧…</p>
<p>那么问题就解决了</p>
<p>将$a_i(i\in [1,n])$每个都分解质因数，把质因数和它的指数存起来，然后放在一起排个序</p>
<p>每次处理一个质因子$p$(因为排过序了所以在数组里是连续的一段)，然后根据上面的式子搞一搞就出来了~</p>
<p><i class="fa fa-code fa-2x"></i><br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">program</span> bzoj_3560;</span><br><span class="line"><span class="keyword">const</span> mo=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">type</span> rec=<span class="keyword">record</span> a,p:longint; <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">var</span> s:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">2500000</span>]<span class="keyword">of</span> rec;</span><br><span class="line">    n,a,i,j,tot:longint;</span><br><span class="line">    ans:int64;</span><br><span class="line">    pre:<span class="keyword">array</span>[<span class="number">0</span>..<span class="number">100</span>]<span class="keyword">of</span> int64;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">count</span><span class="params">(x:longint)</span>;</span></span><br><span class="line"><span class="keyword">var</span> i:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">2</span> <span class="keyword">to</span> trunc(sqrt(x)) <span class="keyword">do</span> <span class="keyword">if</span> x <span class="keyword">mod</span> i=<span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    inc(tot);</span><br><span class="line">    s[tot].a:=i;</span><br><span class="line">    <span class="keyword">while</span> x <span class="keyword">mod</span> i=<span class="number">0</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      inc(s[tot].p);</span><br><span class="line">      x:=x <span class="keyword">div</span> i;</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">if</span> x&lt;&gt;<span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    inc(tot);</span><br><span class="line">    s[tot].a:=x;</span><br><span class="line">    s[tot].p:=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">qsort</span><span class="params">(l,r:longint)</span>;</span></span><br><span class="line"><span class="keyword">var</span> i,j:longint;</span><br><span class="line">    mid,p:rec;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  i:=l;</span><br><span class="line">  j:=r;</span><br><span class="line">  mid:=s[(l+r)&gt;&gt;<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">repeat</span></span><br><span class="line">    <span class="keyword">while</span> (s[i].a&lt;mid.a)<span class="keyword">or</span>((s[i].a=mid.a)<span class="keyword">and</span>(s[i].p&lt;mid.p)) <span class="keyword">do</span> inc(i);</span><br><span class="line">    <span class="keyword">while</span> (s[j].a&gt;mid.a)<span class="keyword">or</span>((s[j].a=mid.a)<span class="keyword">and</span>(s[j].p&gt;mid.p)) <span class="keyword">do</span> dec(j);</span><br><span class="line">    <span class="keyword">if</span> i&lt;=j <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      p:=s[i];</span><br><span class="line">      s[i]:=s[j];</span><br><span class="line">      s[j]:=p;</span><br><span class="line">      inc(i);</span><br><span class="line">      dec(j);</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">until</span> i&gt;j;</span><br><span class="line">  <span class="keyword">if</span> l&lt;j <span class="keyword">then</span> qsort(l,j);</span><br><span class="line">  <span class="keyword">if</span> i&lt;r <span class="keyword">then</span> qsort(i,r);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qp</span><span class="params">(x,p:longint)</span>:</span>int64;</span><br><span class="line"><span class="keyword">var</span> pre:int64;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  qp:=<span class="number">1</span>;</span><br><span class="line">  pre:=x;</span><br><span class="line">  <span class="keyword">while</span> p&lt;&gt;<span class="number">0</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span> p <span class="keyword">and</span> <span class="number">1</span>=<span class="number">1</span> <span class="keyword">then</span> qp:=(qp*pre)<span class="keyword">mod</span> mo;</span><br><span class="line">    pre:=(pre*pre)<span class="keyword">mod</span> mo;</span><br><span class="line">    p:=p&gt;&gt;<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">calc</span><span class="params">(l,r:longint)</span>;</span></span><br><span class="line"><span class="keyword">var</span> i:longint;</span><br><span class="line">    p:int64;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  pre[<span class="number">0</span>]:=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> s[r].p <span class="keyword">do</span> pre[i]:=(pre[i-<span class="number">1</span>]*s[l].a)<span class="keyword">mod</span> mo;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> s[r].p <span class="keyword">do</span> pre[i]:=(pre[i]+pre[i-<span class="number">1</span>])<span class="keyword">mod</span> mo;</span><br><span class="line">  p:=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=l <span class="keyword">to</span> r <span class="keyword">do</span> p:=(p*pre[s[i].p])<span class="keyword">mod</span> mo;</span><br><span class="line">  <span class="keyword">if</span> p=<span class="number">1</span> <span class="keyword">then</span> p:=mo <span class="keyword">else</span> dec(p);</span><br><span class="line">  p:=(((p*qp(s[l].a,mo-<span class="number">2</span>))<span class="keyword">mod</span> mo)*(s[l].a-<span class="number">1</span>)+<span class="number">1</span>)<span class="keyword">mod</span> mo;</span><br><span class="line">  ans:=(ans*p)<span class="keyword">mod</span> mo;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  readln(n);</span><br><span class="line">  tot:=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    readln(a);</span><br><span class="line">    count(a);</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  qsort(<span class="number">1</span>,tot);</span><br><span class="line">  i:=<span class="number">1</span>;</span><br><span class="line">  ans:=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> i&lt;=tot <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    j:=i;</span><br><span class="line">    <span class="keyword">while</span> (j&lt;tot)<span class="keyword">and</span>(s[j+<span class="number">1</span>].a=s[i].a) <span class="keyword">do</span> inc(j);</span><br><span class="line">    calc(i,j);</span><br><span class="line">    i:=j+<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  writeln(ans);</span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><i class="fa fa-space-shuttle"></i> <i class="fa fa-times-circle"></i> <i class="fa fa-space-shuttle fa-flip-horizontal"></i><br>]]>
    
    </summary>
    
      <category term="Math" scheme="http://platypuspro.github.io/tags/Math/"/>
    
      <category term="BZOJ" scheme="http://platypuspro.github.io/categories/BZOJ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[BZOJ 3884]]></title>
    <link href="http://platypuspro.github.io/posts/bzoj-3884/"/>
    <id>http://platypuspro.github.io/posts/bzoj-3884/</id>
    <published>2015-04-03T08:49:30.000Z</published>
    <updated>2015-04-03T10:11:52.000Z</updated>
    <content type="html"><![CDATA[<p><i class="fa fa-btc fa-spin"></i><br><a id="more"></a><br><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3884" target="_blank" rel="external">传送门</a></p>
<h1 id="$$2^{2^{2^{2^{2\cdots}}}}\_mod\_p$$">$$2^{2^{2^{2^{2\cdots}}}}\ mod\ p$$</h1><p>Orz <a href="http://blog.csdn.net/PoPoQQQ/article/details/43951401" target="_blank" rel="external">PoPoQQQ</a></p>
<p>将$p$分解为$2^k$与一个奇数的积: $p=2^k \cdot q$，原式即为</p>
<h2 id="$$2^k(2^{(2^{2^{2^{2\cdots}}}-k)}mod\_q)mod\_p$$">$$2^k(2^{(2^{2^{2^{2\cdots}}}-k)}mod\ q)mod\ p$$</h2><p>由<a href="http://zh.wikipedia.org/wiki/%E6%AC%A7%E6%8B%89%E5%AE%9A%E7%90%86_(%E6%95%B0%E8%AE%BA)" target="_blank" rel="external">欧拉定理</a>得</p>
<h2 id="$$2^k(2^{(2^{2^{2^{2\cdots}}}-k)mod\_\varphi(q)}mod\_q)mod\_p$$">$$2^k(2^{(2^{2^{2^{2\cdots}}}-k)mod\ \varphi(q)}mod\ q)mod\ p$$</h2><p>发现上面的一坨$(2^{2^{2^{2\cdots}}}-k)mod\ \varphi(q)$似乎和原式有点像啊</p>
<blockquote>
<p>Tips: 经打表可得：似乎奇数的欧拉函数都是偶数的说</p>
</blockquote>
<p>然后先把$mod\ \varphi(q)$意义下的$-k$扔到一边一会再算，递归化简这个式子，发现递归的终点是$(2^{2^{2^{2^{2\cdots}}}}-k)\ mod\ 1$</p>
<p>而任何数$mod\ 1$都是$0$，然后…就搞完了…回溯算算就行了</p>
<p><i class="fa fa-code fa-2x"></i></p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">program</span> bzoj_3884;</span><br><span class="line"><span class="keyword">var</span> t,p:longint;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calc_phi</span><span class="params">(x:longint)</span>:</span>longint;</span><br><span class="line"><span class="keyword">var</span> cnt,i:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  cnt:=x;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">2</span> <span class="keyword">to</span> trunc(sqrt(x)) <span class="keyword">do</span> <span class="keyword">if</span> x <span class="keyword">mod</span> i=<span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    cnt:=cnt <span class="keyword">div</span> i*(i-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> x <span class="keyword">mod</span> i=<span class="number">0</span> <span class="keyword">do</span> x:=x <span class="keyword">div</span> i;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">if</span> x=<span class="number">1</span> <span class="keyword">then</span> <span class="keyword">exit</span>(cnt) <span class="keyword">else</span> <span class="keyword">exit</span>(cnt <span class="keyword">div</span> x*(x-<span class="number">1</span>));</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qp</span><span class="params">(x,k,m:longint)</span>:</span>longint;</span><br><span class="line"><span class="keyword">var</span> p:int64;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  qp:=<span class="number">1</span>;</span><br><span class="line">  p:=x;</span><br><span class="line">  <span class="keyword">while</span> k&lt;&gt;<span class="number">0</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span> k <span class="keyword">and</span> <span class="number">1</span>=<span class="number">1</span> <span class="keyword">then</span> qp:=(qp*p)<span class="keyword">mod</span> m;</span><br><span class="line">    p:=(p*p)<span class="keyword">mod</span> m;</span><br><span class="line">    k:=k&gt;&gt;<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">count</span><span class="params">(p:longint)</span>:</span>longint;</span><br><span class="line"><span class="keyword">var</span> k,phi,ans:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">if</span> p=<span class="number">1</span> <span class="keyword">then</span> <span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line">  k:=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> p <span class="keyword">and</span> <span class="number">1</span>=<span class="number">0</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    p:=p&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    inc(k);</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  phi:=calc_phi(p);</span><br><span class="line">  ans:=(count(phi)+phi-k <span class="keyword">mod</span> phi)<span class="keyword">mod</span> phi;</span><br><span class="line">  <span class="keyword">exit</span>((qp(<span class="number">2</span>,ans,p)<span class="keyword">mod</span> p)&lt;&lt;k);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  readln(t);</span><br><span class="line">  <span class="keyword">for</span> t:=<span class="number">1</span> <span class="keyword">to</span> t <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    readln(p);</span><br><span class="line">    writeln(count(p));</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p><i class="fa fa-btc fa-spin"></i><br>]]>
    
    </summary>
    
      <category term="Math" scheme="http://platypuspro.github.io/tags/Math/"/>
    
      <category term="BZOJ" scheme="http://platypuspro.github.io/categories/BZOJ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[BZOJ 1010]]></title>
    <link href="http://platypuspro.github.io/posts/bzoj-1010/"/>
    <id>http://platypuspro.github.io/posts/bzoj-1010/</id>
    <published>2015-03-20T23:42:33.000Z</published>
    <updated>2015-03-21T00:59:06.000Z</updated>
    <content type="html"><![CDATA[<p>$\Xi$<br><a id="more"></a><br>若将第$j+1$件到第$i$件放在一起，则<strong>总共</strong>(算上之前的决策)需要花费$f_i=f_j+(\sum_{k=j+1}^{i}C_k+i-j-L-1)^2$</p>
<p>所以方程为$f_i=min{\lbrace}f_j+(sum_i-sum_j+i-j-L-1)^2\rbrace\ (sum_x=\sum_{i=1}^{x}C_i)$</p>
<p>若决策$k$优于决策$j(0{\leq}k,j&lt;i)$，则$f_k+(sum_i+i-sum_k-k-L-1)^2&lt;f_j+(sum_i+i-sum_j-j-L-1)^2$</p>
<p>整理一下，设$P_i=sum_i+i$，把含$i$的都扔到一边，得$f_k+(P_k+L+1)^2-f_j-(P_j+L+1)^2&lt;P_i(P_k-P_j)$</p>
<p>把$(P_k-P_j)$除过去，得到了一个类似计算斜率的式子，设$G_i=f_i+(P_i+L+1)^2$，得到$\frac{G_k-G_j}{P_k-P_j}&lt;P_i$</p>
<p>因为$P_i$单调递增，所以斜率单调递增，成了下凸壳，用单调队列搞一下就行了</p>
<p>对于每次决策$f_i$，由上面的公式可知，最优解就在下凸壳上最后一个满足斜率小于$P_i$的线段的右端点</p>
<p>所以对于每次决策，在单调队列中找到最优解，更新$f_i$，维护下凸壳性质并加入当前点就好了</p>
<blockquote>
<p>注意int64</p>
</blockquote>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">program</span> bzoj_1010;</span><br><span class="line"><span class="keyword">var</span> q:<span class="keyword">array</span>[<span class="number">0</span>..<span class="number">50000</span>]<span class="keyword">of</span> longint;</span><br><span class="line">    n,i,l,hd,tl:longint;</span><br><span class="line">    f,pre:<span class="keyword">array</span>[<span class="number">0</span>..<span class="number">50000</span>]<span class="keyword">of</span> int64;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calc</span><span class="params">(i,j:longint)</span>:</span>extended;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">exit</span>((f[i]-f[j]+sqr(pre[i]+l+<span class="number">1</span>)-sqr(pre[j]+l+<span class="number">1</span>))/((pre[i]-pre[j])*<span class="number">2</span>));</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  readln(n,l);</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">read</span>(pre[i]);</span><br><span class="line">    inc(pre[i],pre[i-<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span> inc(pre[i],i);</span><br><span class="line">  hd:=<span class="number">0</span>;</span><br><span class="line">  tl:=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">while</span> (hd&lt;tl)<span class="keyword">and</span>(calc(q[hd],q[hd+<span class="number">1</span>])&lt;pre[i]) <span class="keyword">do</span> inc(hd);</span><br><span class="line">    f[i]:=f[q[hd]]+sqr(pre[i]-pre[q[hd]]-l-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (tl&gt;hd)<span class="keyword">and</span>(calc(q[tl-<span class="number">1</span>],q[tl])&gt;calc(q[tl],i)) <span class="keyword">do</span> dec(tl);</span><br><span class="line">    inc(tl);</span><br><span class="line">    q[tl]:=i;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  writeln(f[n]);</span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>$\Xi$<br>]]>
    
    </summary>
    
      <category term="Dynamic Programming" scheme="http://platypuspro.github.io/tags/Dynamic-Programming/"/>
    
      <category term="BZOJ" scheme="http://platypuspro.github.io/categories/BZOJ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[BZOJ 3289]]></title>
    <link href="http://platypuspro.github.io/posts/bzoj-3289/"/>
    <id>http://platypuspro.github.io/posts/bzoj-3289/</id>
    <published>2015-03-20T12:39:02.000Z</published>
    <updated>2015-03-20T13:51:52.000Z</updated>
    <content type="html"><![CDATA[<p>$\Omega$<br><a id="more"></a><br><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3289" target="_blank" rel="external">传送门</a></p>
<p><del>莫队尼玛26s才过</del></p>
<p>因为这题没给数据范围，树状数组不知道开多大，所以先离散化一下 <del>P党程序里写了俩快排真长…TAT</del></p>
<p>首先还是分块+排序，节省转移时的消耗，然后转移时要注意这些：</p>
<ul>
<li><p>修改区间左端点就查询比左端点的数小的，右端点就查询比右端点的数大的（逆序对判断条件：$i&lt;j且a[i]&gt;a[j]$）</p>
</li>
<li><p>当前区间向询问的区间转移时要注意<code>for</code>循环的顺序，一定是当前区间端点向询问区间端点逐个转移，否则有的情况会考虑不到（例如样例这样）</p>
</li>
</ul>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">program</span> bzoj_3289;</span><br><span class="line"><span class="keyword">type</span> qu=<span class="keyword">record</span> l,r,id,ans:longint; <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">var</span> bit,pos,bl,a,s:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">50000</span>]<span class="keyword">of</span> longint;</span><br><span class="line">    ask:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">50000</span>]<span class="keyword">of</span> qu;</span><br><span class="line">    n,q,i,block,tot,cnt:longint;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span><span class="params">(x:longint)</span>:</span>longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">exit</span>(x <span class="keyword">and</span> -x);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sml</span><span class="params">(a,b:qu)</span>:</span>boolean;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">if</span> bl[a.l]=bl[b.l] <span class="keyword">then</span> <span class="keyword">exit</span>(a.r&lt;b.r);</span><br><span class="line">  <span class="keyword">exit</span>(a.l&lt;b.l);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">qsort</span><span class="params">(l,r:longint)</span>;</span></span><br><span class="line"><span class="keyword">var</span> i,j:longint;</span><br><span class="line">    mid,p:qu;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  i:=l;</span><br><span class="line">  j:=r;</span><br><span class="line">  mid:=ask[(l+r)&gt;&gt;<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">repeat</span></span><br><span class="line">    <span class="keyword">while</span> sml(ask[i],mid) <span class="keyword">do</span> inc(i);</span><br><span class="line">    <span class="keyword">while</span> sml(mid,ask[j]) <span class="keyword">do</span> dec(j);</span><br><span class="line">    <span class="keyword">if</span> i&lt;=j <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      p:=ask[i];</span><br><span class="line">      ask[i]:=ask[j];</span><br><span class="line">      ask[j]:=p;</span><br><span class="line">      inc(i);</span><br><span class="line">      dec(j);</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">until</span> i&gt;j;</span><br><span class="line">  <span class="keyword">if</span> i&lt;r <span class="keyword">then</span> qsort(i,r);</span><br><span class="line">  <span class="keyword">if</span> l&lt;j <span class="keyword">then</span> qsort(l,j);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">qsort_</span><span class="params">(l,r:longint)</span>;</span></span><br><span class="line"><span class="keyword">var</span> i,j,mid,p:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  i:=l;</span><br><span class="line">  j:=r;</span><br><span class="line">  mid:=a[(l+r)&gt;&gt;<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">repeat</span></span><br><span class="line">    <span class="keyword">while</span> a[i]&lt;mid <span class="keyword">do</span> inc(i);</span><br><span class="line">    <span class="keyword">while</span> a[j]&gt;mid <span class="keyword">do</span> dec(j);</span><br><span class="line">    <span class="keyword">if</span> i&lt;=j <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      p:=a[i];</span><br><span class="line">      a[i]:=a[j];</span><br><span class="line">      a[j]:=p;</span><br><span class="line">      p:=pos[i];</span><br><span class="line">      pos[i]:=pos[j];</span><br><span class="line">      pos[j]:=p;</span><br><span class="line">      inc(i);</span><br><span class="line">      dec(j);</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">until</span> i&gt;j;</span><br><span class="line">  <span class="keyword">if</span> i&lt;r <span class="keyword">then</span> qsort_(i,r);</span><br><span class="line">  <span class="keyword">if</span> l&lt;j <span class="keyword">then</span> qsort_(l,j);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">query</span><span class="params">(p:longint)</span>:</span>longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  query:=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> p&gt;<span class="number">0</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    inc(query,bit[p]);</span><br><span class="line">    dec(p,c(p));</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">modify</span><span class="params">(p,d:longint)</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">while</span> p&lt;=cnt <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    inc(bit[p],d);</span><br><span class="line">    inc(p,c(p));</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">solve</span>;</span></span><br><span class="line"><span class="keyword">var</span> i,j,l,r:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  fillchar(bit,sizeof(bit),<span class="number">0</span>);</span><br><span class="line">  l:=<span class="number">1</span>;</span><br><span class="line">  r:=<span class="number">0</span>;</span><br><span class="line">  tot:=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> q <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">for</span> j:=l <span class="keyword">to</span> ask[i].l-<span class="number">1</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      dec(tot,query(s[j]-<span class="number">1</span>));</span><br><span class="line">      modify(s[j],-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">    <span class="keyword">for</span> j:=l-<span class="number">1</span> <span class="keyword">downto</span> ask[i].l <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      inc(tot,query(s[j]-<span class="number">1</span>));</span><br><span class="line">      modify(s[j],<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">    <span class="keyword">for</span> j:=r+<span class="number">1</span> <span class="keyword">to</span> ask[i].r <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      inc(tot,query(cnt)-query(s[j]));</span><br><span class="line">      modify(s[j],<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">    <span class="keyword">for</span> j:=r <span class="keyword">downto</span> ask[i].r+<span class="number">1</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      dec(tot,query(cnt)-query(s[j]));</span><br><span class="line">      modify(s[j],-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">    l:=ask[i].l;</span><br><span class="line">    r:=ask[i].r;</span><br><span class="line">    ask[i].ans:=tot;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  readln(n);</span><br><span class="line">  block:=trunc(sqrt(n));</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span> bl[i]:=(i-<span class="number">1</span>) <span class="keyword">div</span> block+<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span> <span class="keyword">read</span>(a[i]);</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span> pos[i]:=i;</span><br><span class="line">  qsort_(<span class="number">1</span>,n);</span><br><span class="line">  cnt:=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span> (i=<span class="number">1</span>)<span class="keyword">or</span>(a[i]&lt;&gt;a[i-<span class="number">1</span>]) <span class="keyword">then</span> inc(cnt);</span><br><span class="line">    s[pos[i]]:=cnt;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  readln(q);</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> q <span class="keyword">do</span> <span class="keyword">with</span> ask[i] <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    readln(l,r);</span><br><span class="line">    id:=i;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  qsort(<span class="number">1</span>,q);</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> q <span class="keyword">do</span> pos[ask[i].id]:=i;</span><br><span class="line">  solve;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> q <span class="keyword">do</span> writeln(ask[pos[i]].ans);</span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>$\Omega$<br>]]>
    
    </summary>
    
      <category term="Mo Algorithm" scheme="http://platypuspro.github.io/tags/Mo-Algorithm/"/>
    
      <category term="BZOJ" scheme="http://platypuspro.github.io/categories/BZOJ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[BZOJ 2705]]></title>
    <link href="http://platypuspro.github.io/posts/bzoj-2705/"/>
    <id>http://platypuspro.github.io/posts/bzoj-2705/</id>
    <published>2015-03-19T13:19:20.000Z</published>
    <updated>2015-03-19T23:46:56.000Z</updated>
    <content type="html"><![CDATA[<p>$O(\sqrt{n})求\varphi$<br><a id="more"></a></p>
<blockquote>
<p>SDOI真有人性，出这么欢乐题 —<a href="http://www.lydsy.com/JudgeOnline/wttl/thread.php?tid=597" target="_blank" rel="external">root</a></p>
</blockquote>
<p>枚举$n$的约数$k$，令$s(k)$为满足$gcd(m,n)=k,(1{\leq}m{\leq}n)m$的个数，则$ans=\sum_{n\ mod\ k=0}(k*s(k))$</p>
<p>${\because}\ gcd(m,n)=k$</p>
<p>${\therefore}\ gcd(\frac{m}{k},\frac{n}{k})=1$</p>
<p>${\therefore}\ s(k)=\varphi(\frac{n}{k})$</p>
<p>其实主要在于如何$O(\sqrt{n})$的复杂度求单个$\varphi(x)$ 步骤如下：</p>
<ol>
<li><p>将$\varphi$赋为$x$，表示当前与$x$互质的数有$x$个</p>
</li>
<li><p>找到一个$x$的约数$k$</p>
</li>
<li><p>找到了约数，那么和$x$互质的数就又少了$\frac{\varphi}{k}$个，$\varphi=\varphi*\frac{k-1}{k}$</p>
</li>
<li><p>将这个约数从$x$中全都除掉</p>
</li>
<li><p>重复以上步骤直到找不到$x$的约数</p>
</li>
<li><p>最后如果$x$是质数还要特判一下</p>
</li>
<li><p>返回$\varphi$的值</p>
</li>
</ol>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">program</span> bzoj_2705;</span><br><span class="line"><span class="keyword">var</span> n,ans:int64;</span><br><span class="line">    m,i:longint;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">phi</span><span class="params">(x:longint)</span>:</span>longint;</span><br><span class="line"><span class="keyword">var</span> i:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  phi:=x;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">2</span> <span class="keyword">to</span> trunc(sqrt(x)) <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> x <span class="keyword">mod</span> i=<span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    phi:=phi <span class="keyword">div</span> i*(i-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> x <span class="keyword">mod</span> i=<span class="number">0</span> <span class="keyword">do</span> x:=x <span class="keyword">div</span> i;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">if</span> x&gt;<span class="number">1</span> <span class="keyword">then</span> phi:=phi <span class="keyword">div</span> x*(x-<span class="number">1</span>);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  readln(n);</span><br><span class="line">  m:=trunc(sqrt(n));</span><br><span class="line">  ans:=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> m <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> n <span class="keyword">mod</span> i=<span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    inc(ans,i*phi(n <span class="keyword">div</span> i));</span><br><span class="line">    inc(ans,(n <span class="keyword">div</span> i)*phi(i));</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">if</span> int64(m)*int64(m)=n <span class="keyword">then</span> dec(ans,(n <span class="keyword">div</span> m)*phi(m));</span><br><span class="line">  writeln(ans);</span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>$O(\sqrt{n})求\varphi$<br>]]>
    
    </summary>
    
      <category term="Euler&#39;s Totient Function" scheme="http://platypuspro.github.io/tags/Euler-s-totient-function/"/>
    
      <category term="BZOJ" scheme="http://platypuspro.github.io/categories/BZOJ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[BZOJ 2818]]></title>
    <link href="http://platypuspro.github.io/posts/bzoj-2818/"/>
    <id>http://platypuspro.github.io/posts/bzoj-2818/</id>
    <published>2015-03-19T11:36:13.000Z</published>
    <updated>2015-03-19T14:02:42.000Z</updated>
    <content type="html"><![CDATA[<p>还是$\varphi$<br><a id="more"></a><br>$gcd(x,y)=k,k$为素数说明$gcd(\frac{x}{k},\frac{y}{k})=1$  这样欧拉函数就粗线了…</p>
<p>枚举每个素数，然后每个素数$p$对于答案的贡献就是$[1,n\ div\ p]$中互质对的个数</p>
<p>包括$y$的数对$(x,y)\ (x\in[1,y])$中的互质对个数即为$\varphi(y)$，所以$[1,x]$中互质对个数就是$2*\varphi(x)-1$（-1是因为$(1,1)$算了两次）</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">program</span> bzoj_2818;</span><br><span class="line"><span class="keyword">var</span> p:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">10000000</span>]<span class="keyword">of</span> longint;</span><br><span class="line">    prime:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">10000000</span>]<span class="keyword">of</span> boolean;</span><br><span class="line">    phi:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">10000000</span>]<span class="keyword">of</span> int64;</span><br><span class="line">    n,i,j,cnt:longint;</span><br><span class="line">    ans:int64;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">calc</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  fillchar(prime,sizeof(prime),true);</span><br><span class="line">  cnt:=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">2</span> <span class="keyword">to</span> n <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span> prime[i] <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      inc(cnt);</span><br><span class="line">      p[cnt]:=i;</span><br><span class="line">      phi[i]:=i-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">    <span class="keyword">for</span> j:=<span class="number">1</span> <span class="keyword">to</span> cnt <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      <span class="keyword">if</span> i*p[j]&gt;n <span class="keyword">then</span> break;</span><br><span class="line">      prime[i*p[j]]:=false;</span><br><span class="line">      <span class="keyword">if</span> i <span class="keyword">mod</span> p[j]=<span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">begin</span></span><br><span class="line">        phi[i*p[j]]:=phi[i]*p[j];</span><br><span class="line">        break;</span><br><span class="line">      <span class="keyword">end</span> <span class="keyword">else</span> phi[i*p[j]]:=phi[i]*(p[j]-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  readln(n);</span><br><span class="line">  calc;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">2</span> <span class="keyword">to</span> n <span class="keyword">do</span> inc(phi[i],phi[i-<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span> phi[i]:=phi[i]&lt;&lt;<span class="number">1</span>+<span class="number">1</span>;</span><br><span class="line">  ans:=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> cnt <span class="keyword">do</span> inc(ans,phi[n <span class="keyword">div</span> p[i]]);</span><br><span class="line">  writeln(ans);</span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>还是$\varphi$<br>]]>
    
    </summary>
    
      <category term="Euler&#39;s Totient Function" scheme="http://platypuspro.github.io/tags/Euler-s-totient-function/"/>
    
      <category term="BZOJ" scheme="http://platypuspro.github.io/categories/BZOJ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[BZOJ 2190]]></title>
    <link href="http://platypuspro.github.io/posts/bzoj-2190/"/>
    <id>http://platypuspro.github.io/posts/bzoj-2190/</id>
    <published>2015-03-19T10:09:07.000Z</published>
    <updated>2015-03-19T14:03:00.000Z</updated>
    <content type="html"><![CDATA[<p>$\varphi$<br><a id="more"></a><br><img src="/img/2190_1.png" alt=""><br>先分析一下题目给的图，发现这张图中有三条永远那么长的线和两个对称的区域，所以答案就是其中一个对称的区域中能看到的人数*2+3</p>
<p><img src="/img/2190_2.png" alt=""><br>一竖列一竖列来考虑</p>
<p>首先，对于点$(i,j)$，能看到的条件是$gcd(i,j)=1$，否则还能看到$(\frac{i}{gcd(i,j)},\frac{j}{gcd(i,j)})$等点，显然它们共线，矛盾</p>
<p>对于第$i$列，能看到的点数即为$gcd(i,j)=1(j\in[2,i-1])$的数量，就是说在$[2,i-1]$内与$i$互质的数的数量，咦这不是欧拉函数$\varphi(i-1)$君吗…你好啊~</p>
<p>然后求欧拉函数就好了（这一篇先扯线性筛法）</p>
<p>先用筛法求素数，然后根据求出的素数利用欧拉函数的性质来求，用到的性质如下：</p>
<ul>
<li><p>若x为素数，则$\varphi(x)=x-1$</p>
</li>
<li><p>若$a,b$互质，则$\varphi(a*b)=\varphi(a)*\varphi(b)$</p>
</li>
<li><p>若b为质数且$a\ mod\ b=0$，则$\varphi(a*b)=\varphi(a)*b$</p>
</li>
</ul>
<p>没了，有啥问题看代码吧</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">program</span> bzoj_2190;</span><br><span class="line"><span class="keyword">var</span> phi,p:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">40000</span>]<span class="keyword">of</span> longint;</span><br><span class="line">    n,cnt,i,j,ans:longint;</span><br><span class="line">    prime:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">40000</span>]<span class="keyword">of</span> boolean;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  readln(n);</span><br><span class="line">  fillchar(prime,sizeof(prime),true);</span><br><span class="line">  cnt:=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">2</span> <span class="keyword">to</span> n <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span> prime[i] <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      inc(cnt);</span><br><span class="line">      p[cnt]:=i;</span><br><span class="line">      phi[i]:=i-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">    <span class="keyword">for</span> j:=<span class="number">1</span> <span class="keyword">to</span> cnt <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      <span class="keyword">if</span> i*p[j]&gt;=n <span class="keyword">then</span> break;</span><br><span class="line">      prime[i*p[j]]:=false;</span><br><span class="line">      <span class="keyword">if</span> i <span class="keyword">mod</span> p[j]=<span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">begin</span></span><br><span class="line">        phi[i*p[j]]:=phi[i]*p[j];</span><br><span class="line">        break;</span><br><span class="line">      <span class="keyword">end</span> <span class="keyword">else</span> phi[i*p[j]]:=phi[i]*(p[j]-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  ans:=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">2</span> <span class="keyword">to</span> n-<span class="number">1</span> <span class="keyword">do</span> inc(ans,phi[i]);</span><br><span class="line">  writeln(ans*<span class="number">2</span>+<span class="number">3</span>);</span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>$\varphi$<br>]]>
    
    </summary>
    
      <category term="Euler&#39;s Totient Function" scheme="http://platypuspro.github.io/tags/Euler-s-totient-function/"/>
    
      <category term="BZOJ" scheme="http://platypuspro.github.io/categories/BZOJ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[BZOJ 3566]]></title>
    <link href="http://platypuspro.github.io/posts/bzoj-3566/"/>
    <id>http://platypuspro.github.io/posts/bzoj-3566/</id>
    <published>2015-03-18T12:27:34.000Z</published>
    <updated>2015-03-25T05:14:24.000Z</updated>
    <content type="html"><![CDATA[<p>$\Theta$<br><a id="more"></a><br><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3566" target="_blank" rel="external">传送门</a></p>
<p>BY <a href="http://wyfcyx.is-programmer.com/posts/74623.html" target="_blank" rel="external">wyfcyx</a></p>
<p>直接求充上电的概率好复杂，那么我们考虑求充不上电的概率</p>
<p>这个概率可以分为两部分：儿子没法给它充电的概率和爸爸没法给它充电的概率，设分别为$f_{i,0}$和$f_{i,1}$，可以用两遍<code>dfs</code>搞出来</p>
<p>首先考虑它的儿子给它充不上电的情况，即为每个儿子的$P_{儿子没电}+P_{儿子有电但边没电啊}$的乘积再乘上这个点自己没电的概率（公式中点和边的概率都用$P$来表示了，请注意区分）</p>
<h2 id="$f_{i,0}=(1−P_i)\prod_{j{\in}son(i)}(f_{j,0}+(1−f_{j,0})∗(1−P_{Edge_{i,j}}))$">$f_{i,0}=(1−P_i)\prod_{j{\in}son(i)}(f_{j,0}+(1−f_{j,0})∗(1−P_{Edge_{i,j}}))$</h2><p>下面考虑爸爸没法给它充电的情况，设$P’$为除掉$x$对它爸爸影响后$fa_x$没充上电的概率，就是$P_{下面没电且除掉x的影响}*P_{上面没电}$</p>
<h2 id="$P’=\frac{f_{fa_x,0}}{f_{x,0}+(1−f_{x,0})∗(1−P_{Edge(x,fa_x)})}∗f_{fa_x,1}$">$P’=\frac{f_{fa_x,0}}{f_{x,0}+(1−f_{x,0})∗(1−P_{Edge(x,fa_x)})}∗f_{fa_x,1}$</h2><p>然后$x$上面充不上电的概率就很容易得出了 就是$P_{儿子乖，爹没电}+P_{爹有电但边没电啊}$</p>
<h2 id="$f_{x,1}=P’+(1−P’)∗(1−P_{Edge(x,fa_x)})$">$f_{x,1}=P’+(1−P’)∗(1−P_{Edge(x,fa_x)})$</h2><p>最终每个节点$i$被充电的概率$g_i=1−f_{i,0}∗f_{i,1}$</p>
<h2 id="$ans=\sum_{i=1}^{n}g_i$">$ans=\sum_{i=1}^{n}g_i$</h2><p>嫌字小的请自行准备放大镜 <del>我才不说右键点公式会出来缩放选项的呢</del></p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">program</span> bzoj_3566;</span><br><span class="line"><span class="keyword">var</span> l:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">1000000</span>]<span class="keyword">of</span> <span class="keyword">record</span> ed,pre:longint; p:extended; <span class="keyword">end</span>;</span><br><span class="line">    lst,fa:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">500000</span>]<span class="keyword">of</span> longint;</span><br><span class="line">    f1,f2:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">500000</span>]<span class="keyword">of</span> extended;</span><br><span class="line">    n,i,a,b,c,tot:longint;</span><br><span class="line">    ans:extended;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">link</span><span class="params">(a,b,p:longint)</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  inc(tot);</span><br><span class="line">  l[tot].pre:=lst[a];</span><br><span class="line">  lst[a]:=tot;</span><br><span class="line">  l[tot].ed:=b;</span><br><span class="line">  l[tot].p:=p/<span class="number">100</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">dfs1</span><span class="params">(t:longint)</span>;</span></span><br><span class="line"><span class="keyword">var</span> k:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  k:=lst[t];</span><br><span class="line">  <span class="keyword">while</span> k&lt;&gt;<span class="number">0</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span> l[k].ed&lt;&gt;fa[t] <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      fa[l[k].ed]:=t;</span><br><span class="line">      dfs1(l[k].ed);</span><br><span class="line">      f1[t]:=f1[t]*(f1[l[k].ed]+(<span class="number">1</span>-f1[l[k].ed])*(<span class="number">1</span>-l[k].p));</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">    k:=l[k].pre;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">dfs2</span><span class="params">(t:longint)</span>;</span></span><br><span class="line"><span class="keyword">var</span> k:longint;</span><br><span class="line">    p:extended;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  k:=lst[t];</span><br><span class="line">  <span class="keyword">while</span> k&lt;&gt;<span class="number">0</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span> l[k].ed&lt;&gt;fa[t] <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      p:=f1[l[k].ed]+(<span class="number">1</span>-f1[l[k].ed])*(<span class="number">1</span>-l[k].p);</span><br><span class="line">      <span class="keyword">if</span> p&lt;<span class="number">1</span>e-<span class="number">6</span> <span class="keyword">then</span> p:=<span class="number">0</span> <span class="keyword">else</span> p:=f1[t]*f2[t]/p;</span><br><span class="line">      f2[l[k].ed]:=p+(<span class="number">1</span>-p)*(<span class="number">1</span>-l[k].p);</span><br><span class="line">      dfs2(l[k].ed);</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">    k:=l[k].pre;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  readln(n);</span><br><span class="line">  tot:=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n-<span class="number">1</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    readln(a,b,c);</span><br><span class="line">    link(a,b,c);</span><br><span class="line">    link(b,a,c);</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">read</span>(c);</span><br><span class="line">    f1[i]:=<span class="number">1</span>-c/<span class="number">100</span>;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  fa[<span class="number">1</span>]:=<span class="number">0</span>;</span><br><span class="line">  dfs1(<span class="number">1</span>);</span><br><span class="line">  f2[<span class="number">1</span>]:=<span class="number">1</span>;</span><br><span class="line">  dfs2(<span class="number">1</span>);</span><br><span class="line">  ans:=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span> ans:=ans+<span class="number">1</span>-f1[i]*f2[i];</span><br><span class="line">  writeln(ans:<span class="number">0</span>:<span class="number">6</span>);</span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>$\Theta$<br>]]>
    
    </summary>
    
      <category term="Dynamic Programming" scheme="http://platypuspro.github.io/tags/Dynamic-Programming/"/>
    
      <category term="BZOJ" scheme="http://platypuspro.github.io/categories/BZOJ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[BZOJ 3564]]></title>
    <link href="http://platypuspro.github.io/posts/bzoj-3564/"/>
    <id>http://platypuspro.github.io/posts/bzoj-3564/</id>
    <published>2015-03-18T11:46:42.000Z</published>
    <updated>2015-03-18T12:27:08.000Z</updated>
    <content type="html"><![CDATA[<p>据说随机增量只要$O(n)$？<br><a id="more"></a><br><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3564" target="_blank" rel="external">传送门</a></p>
<p>最小椭圆覆盖是什么东西…只听说过最小圆覆盖啊…</p>
<p>不过这道题似乎把坐标系旋转一下再把$x$轴缩短几倍就成了最小圆覆盖</p>
<p>坐标旋转公式：推导过程<a href="http://www.cnblogs.com/ywxgod/archive/2010/08/06/1793609.html" target="_blank" rel="external">戳我</a></p>
<p>$x’=\cos(\alpha)x-\sin(\alpha)y$</p>
<p>$y’=\cos(\alpha)y+\sin(\alpha)x$</p>
<p>表示$(x,y)$逆时针旋转$\alpha$度之后的坐标$(x’,y’)$，这道题要把旋转过的复原,那就旋转$-\alpha$度</p>
<p>然后$x$坐标再除以放大倍数$d$就好了，下面就是随机增量了，扯点我的理解：</p>
<p>随机增量=随机+增量</p>
<p>每次将一个圆外的点加入圆中，由于将所有点的顺序都随机了一遍，所以效率成了期望$O(n)$?…<del>真的吗…</del></p>
<p>可以证明每次添加的点都在圆周上 <del>据说证明好复杂…反正是可以证的…</del></p>
<p>然后挑圆内的点逐渐扩大半径直至覆盖新加的点与原来的点（通过两条弦的垂线的焦点来确定圆心，公式建议自己手推，不然代码中的很难理解）</p>
<p>这样半径就会一直递增，直到覆盖所有点</p>
<p>程序中计算三点的外接圆的方式是：算出两点连线的中垂线的解析式，然后求两个中垂线的交点（似乎不会出现除<code>0</code>错误）</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">program</span> bzoj_3564;</span><br><span class="line"><span class="keyword">uses</span> math;</span><br><span class="line"><span class="keyword">const</span> eps=<span class="number">1</span>e-<span class="number">6</span>;</span><br><span class="line"><span class="keyword">type</span> rec=<span class="keyword">record</span> x,y:extended; <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">var</span> p:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">50000</span>]<span class="keyword">of</span> rec;</span><br><span class="line">    n,i,j,k,d:longint;</span><br><span class="line">    px,py,ox,oy,r,pi,a:extended;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">swap</span><span class="params">(<span class="keyword">var</span> a,b:rec)</span>;</span></span><br><span class="line"><span class="keyword">var</span> p:rec;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  p:=a;</span><br><span class="line">  a:=b;</span><br><span class="line">  b:=p;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dis</span><span class="params">(x1,y1,x2,y2:extended)</span>:</span>extended;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">exit</span>(sqrt(sqr(x1-x2)+sqr(y1-y2)));</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">calc</span><span class="params">(a,b,c,d,e,f:extended)</span>;</span> <span class="comment">//ax+by+c=0 dx+ey+f=0</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  ox:=(b*f-e*c)/(a*e-d*b);</span><br><span class="line">  oy:=(a*f-d*c)/(d*b-a*e);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  pi:=arccos(-<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">read</span>(n);</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span> <span class="keyword">read</span>(p[i].x,p[i].y);</span><br><span class="line">  <span class="keyword">read</span>(d);</span><br><span class="line">  a:=(-d/<span class="number">180</span>)*pi;</span><br><span class="line">  <span class="keyword">read</span>(d);</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    px:=p[i].x;</span><br><span class="line">    py:=p[i].y;</span><br><span class="line">    p[i].x:=(px*cos(a)-py*sin(a))/d;</span><br><span class="line">    p[i].y:=px*sin(a)+py*cos(a);</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  randomize;</span><br><span class="line">  <span class="keyword">for</span> i:=n <span class="keyword">downto</span> <span class="number">2</span> <span class="keyword">do</span> swap(p[i],p[random(i-<span class="number">1</span>)+<span class="number">1</span>]);</span><br><span class="line">  ox:=p[<span class="number">1</span>].x;</span><br><span class="line">  oy:=p[<span class="number">1</span>].y;</span><br><span class="line">  r:=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">2</span> <span class="keyword">to</span> n <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> dis(p[i].x,p[i].y,ox,oy)&gt;r+eps <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    ox:=p[i].x;</span><br><span class="line">    oy:=p[i].y;</span><br><span class="line">    r:=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> j:=<span class="number">1</span> <span class="keyword">to</span> i-<span class="number">1</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> dis(p[j].x,p[j].y,ox,oy)&gt;r+eps <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      ox:=(p[i].x+p[j].x)/<span class="number">2</span>;</span><br><span class="line">      oy:=(p[i].y+p[j].y)/<span class="number">2</span>;</span><br><span class="line">      r:=dis(ox,oy,p[j].x,p[j].y);</span><br><span class="line">      <span class="keyword">for</span> k:=<span class="number">1</span> <span class="keyword">to</span> j-<span class="number">1</span> <span class="keyword">do</span></span><br><span class="line">      <span class="keyword">if</span> dis(p[k].x,p[k].y,ox,oy)&gt;r+eps <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">begin</span></span><br><span class="line">        calc(p[i].x-p[j].x,p[i].y-p[j].y,(p[j].x-p[i].x)*(p[i].x+p[j].x)/<span class="number">2</span>+(p[j].y-p[i].y)*(p[i].y+p[j].y)/<span class="number">2</span>,</span><br><span class="line">        p[k].x-p[i].x,p[k].y-p[i].y,(p[i].x-p[k].x)*(p[k].x+p[i].x)/<span class="number">2</span>+(p[i].y-p[k].y)*(p[k].y+p[i].y)/<span class="number">2</span>);</span><br><span class="line">        r:=dis(ox,oy,p[k].x,p[k].y);</span><br><span class="line">      <span class="keyword">end</span>;</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  writeln(r:<span class="number">0</span>:<span class="number">3</span>);</span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>据说随机增量只要$O(n)$？<br>]]>
    
    </summary>
    
      <category term="Random Incremental" scheme="http://platypuspro.github.io/tags/Random-Incremental/"/>
    
      <category term="BZOJ" scheme="http://platypuspro.github.io/categories/BZOJ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[BZOJ 2038]]></title>
    <link href="http://platypuspro.github.io/posts/bzoj-2038/"/>
    <id>http://platypuspro.github.io/posts/bzoj-2038/</id>
    <published>2015-03-17T12:56:27.000Z</published>
    <updated>2015-03-18T00:15:38.000Z</updated>
    <content type="html"><![CDATA[<p>莫队大法好<br><a id="more"></a><br>能使用莫队算法的条件是：</p>
<blockquote>
<p>已知<code>[l,r]</code>的答案，能在<code>O(1)</code>（或<code>O(logn)</code>等较低的时间复杂度）的时间内求得<code>[l+1,r]</code>与<code>[l,r-1]</code>的答案 ——by <a href="http://hzwer.com/2782.html" target="_blank" rel="external">hzwer</a></p>
</blockquote>
<p>那么我们观察这道题，假设一个区间<code>[l,r]</code>内有<code>m</code>只相同颜色的袜子 <del>怎么觉得好恶心…</del>，那么满足条件的取法有$C^2_m$种</p>
<p>而$C^2_m=\frac{m(m-1)}{2}$</p>
<p>整理一下，得$2C^2_m=m^2-m$</p>
<p>现在假设这个区间<code>[l,r]</code>里有两种颜色的袜子，分别有<code>a</code>和<code>b</code>只，那么取法<code>*2</code>共有$a^2+b^2-a-b$种（把这数放在分子上看起来太小，所以就直接换成取法<code>*2</code>了）</p>
<p>三种颜色的取法<code>*2</code>就是$a^2+b^2+c^2-a-b-c$种，发现这些式子对于某种颜色只有一只时也同样成立</p>
<p>所以得到取法总数<code>*2</code>为$\sum_{i=1}^{colors}=colortot[i]^2-colortot[i]$（colors是区间内颜色的数目，colortot是每种颜色的袜子数），注意到后面那一坨的和就是区间里所有袜子的数</p>
<p>所以得到取法种数<code>*2</code>即为$\sum_{i=1}^{colors}-(r-l+1)=colortot[i]^2-(r-l+1)$</p>
<p>这样就得出了计算区间<code>[l,r]</code>内取法的方法，可以考虑上莫队了</p>
<p>分为$\sqrt{n}$块，对其进行排序，目标是使所有左端点在一个块内的询问的右端点是递增的，举个栗子<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">n=6 m=15</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">1 4</span><br><span class="line">1 5</span><br><span class="line">1 6</span><br><span class="line">1 7</span><br><span class="line">2 3</span><br><span class="line">2 4</span><br><span class="line">2 5</span><br><span class="line">2 6</span><br><span class="line">3 4</span><br><span class="line">3 5</span><br><span class="line">3 6</span><br><span class="line">4 5</span><br><span class="line">4 6</span><br></pre></td></tr></table></figure></p>
<p>分块大小为每块2个，排序后变成了<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1 2</span><br><span class="line">2 3</span><br><span class="line">1 3</span><br><span class="line">2 4</span><br><span class="line">1 4</span><br><span class="line">1 5</span><br><span class="line">2 5</span><br><span class="line">2 6</span><br><span class="line">1 6</span><br><span class="line">1 7</span><br><span class="line"><span class="horizontal_rule">---以上为第一块，右端点为递增的</span></span><br><span class="line">3 4</span><br><span class="line">4 5</span><br><span class="line">3 5</span><br><span class="line">4 6</span><br><span class="line">3 6</span><br><span class="line"><span class="horizontal_rule">---第二块</span></span><br></pre></td></tr></table></figure></p>
<p>这样的话转移时就能省很多时间</p>
<p>初始时区间为<code>[1,0]</code>，然后依次向每个询问进行转移，依据上面的公式，只需要维护一个变量表示当前区间内每种颜色数量的平方和，这个变量减掉区间内元素个数就是答案</p>
<p>分母就不用多说了吧，就是$C^2_{r-l+1}=\frac{(r-l+1)(r-l)}{2}$，发现分母分子都有$/2$，直接扔掉，然后用<code>gcd</code>化简一下就是答案</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">program</span> bzoj_2038;</span><br><span class="line"><span class="keyword">type</span> q=<span class="keyword">record</span> l,r,id:longint; mom,son:int64; <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">var</span> c,bl,cnt,pos:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">50000</span>]<span class="keyword">of</span> longint;</span><br><span class="line">    tot:int64;</span><br><span class="line">    n,m,i,block:longint;</span><br><span class="line">    ask:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">50000</span>]<span class="keyword">of</span> q;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gcd</span><span class="params">(a,b:int64)</span>:</span>int64;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">if</span> b=<span class="number">0</span> <span class="keyword">then</span> <span class="keyword">exit</span>(a) <span class="keyword">else</span> <span class="keyword">exit</span>(gcd(b,a <span class="keyword">mod</span> b));</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sml</span><span class="params">(a,b:q)</span>:</span>boolean;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">if</span> bl[a.l]=bl[b.l] <span class="keyword">then</span> <span class="keyword">exit</span>(a.r&lt;b.r);</span><br><span class="line">  <span class="keyword">exit</span>(a.l&lt;b.l);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">qsort</span><span class="params">(l,r:longint)</span>;</span></span><br><span class="line"><span class="keyword">var</span> i,j:longint;</span><br><span class="line">    mid,p:q;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  i:=l;</span><br><span class="line">  j:=r;</span><br><span class="line">  mid:=ask[(l+r)&gt;&gt;<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">repeat</span></span><br><span class="line">    <span class="keyword">while</span> sml(ask[i],mid) <span class="keyword">do</span> inc(i);</span><br><span class="line">    <span class="keyword">while</span> sml(mid,ask[j]) <span class="keyword">do</span> dec(j);</span><br><span class="line">    <span class="keyword">if</span> i&lt;=j <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      p:=ask[i];</span><br><span class="line">      ask[i]:=ask[j];</span><br><span class="line">      ask[j]:=p;</span><br><span class="line">      inc(i);</span><br><span class="line">      dec(j);</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">until</span> i&gt;j;</span><br><span class="line">  <span class="keyword">if</span> i&lt;r <span class="keyword">then</span> qsort(i,r);</span><br><span class="line">  <span class="keyword">if</span> l&lt;j <span class="keyword">then</span> qsort(l,j);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">modify</span><span class="params">(l,r,delta:longint)</span>;</span></span><br><span class="line"><span class="keyword">var</span> i:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">for</span> i:=l <span class="keyword">to</span> r <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    dec(tot,sqr(cnt[c[i]]));</span><br><span class="line">    inc(cnt[c[i]],delta);</span><br><span class="line">    inc(tot,sqr(cnt[c[i]]));</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">solve</span>;</span></span><br><span class="line"><span class="keyword">var</span> i,l,r:longint;</span><br><span class="line">    g:int64;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  l:=<span class="number">1</span>;</span><br><span class="line">  r:=<span class="number">0</span>;</span><br><span class="line">  tot:=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> m <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span> l&lt;ask[i].l <span class="keyword">then</span> modify(l,ask[i].l-<span class="number">1</span>,-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> l&gt;ask[i].l <span class="keyword">then</span> modify(ask[i].l,l-<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> r&lt;ask[i].r <span class="keyword">then</span> modify(r+<span class="number">1</span>,ask[i].r,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> r&gt;ask[i].r <span class="keyword">then</span> modify(ask[i].r+<span class="number">1</span>,r,-<span class="number">1</span>);</span><br><span class="line">    l:=ask[i].l;</span><br><span class="line">    r:=ask[i].r;</span><br><span class="line">    <span class="keyword">with</span> ask[i] <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      <span class="keyword">if</span> l=r <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">begin</span></span><br><span class="line">        son:=<span class="number">0</span>;</span><br><span class="line">        mom:=<span class="number">1</span>;</span><br><span class="line">        continue;</span><br><span class="line">      <span class="keyword">end</span>;</span><br><span class="line">      son:=tot-(r-l+<span class="number">1</span>);</span><br><span class="line">      mom:=int64(r-l+<span class="number">1</span>)*int64(r-l);</span><br><span class="line">      g:=gcd(mom,son);</span><br><span class="line">      son:=son <span class="keyword">div</span> g;</span><br><span class="line">      mom:=mom <span class="keyword">div</span> g;</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  readln(n,m);</span><br><span class="line">  block:=trunc(sqrt(n));</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span> bl[i]:=(i-<span class="number">1</span>)<span class="keyword">div</span> block+<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span> <span class="keyword">read</span>(c[i]);</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> m <span class="keyword">do</span> <span class="keyword">with</span> ask[i] <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    readln(l,r);</span><br><span class="line">    id:=i;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  qsort(<span class="number">1</span>,m);</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> m <span class="keyword">do</span> pos[ask[i].id]:=i;</span><br><span class="line">  solve;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> m <span class="keyword">do</span> <span class="keyword">with</span> ask[pos[i]] <span class="keyword">do</span> writeln(son,<span class="string">'/'</span>,mom);</span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure>
<p><del>mathjax好难 &gt;_&lt;</del></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>莫队大法好<br>]]>
    
    </summary>
    
      <category term="Mo Algorithm" scheme="http://platypuspro.github.io/tags/Mo-Algorithm/"/>
    
      <category term="BZOJ" scheme="http://platypuspro.github.io/categories/BZOJ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[BZOJ 1854]]></title>
    <link href="http://platypuspro.github.io/posts/bzoj-1854/"/>
    <id>http://platypuspro.github.io/posts/bzoj-1854/</id>
    <published>2015-03-16T13:02:53.000Z</published>
    <updated>2015-03-16T13:32:24.000Z</updated>
    <content type="html"><![CDATA[<p><code>→_→</code><br><a id="more"></a><br>1191的升级版，没写的<a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1191" target="_blank" rel="external">戳我</a></p>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1854" target="_blank" rel="external">传送门</a></p>
<p>每种装备的两个属性向这个装备的序号连边，因为边数点数好大所以要用链表</p>
<p>这道题直接用裸Hungary会在BZOJ上TLE <del>尼玛本地刚过2s啊交上去就T 6s+</del></p>
<p>瞅了瞅代码，发现每次增广都要<code>fillchar</code>一个<code>10^6</code>大小的布尔数组有点吃不消啊…</p>
<p>考虑一下优化的办法，因为每个代表装备的点只有两个点向其连边，所以直接记录下是与两个点中的哪一个连接，判断条件改一下就好了，这样也省了<code>fillchar</code></p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">program</span> bzoj_1854;</span><br><span class="line"><span class="keyword">const</span> maxn=<span class="number">1000000</span>;</span><br><span class="line"><span class="keyword">var</span> l:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">2</span>*maxn]<span class="keyword">of</span> <span class="keyword">record</span> ed,pre:longint; <span class="keyword">end</span>;</span><br><span class="line">    p,num:<span class="keyword">array</span>[<span class="number">1</span>..maxn]<span class="keyword">of</span> longint;</span><br><span class="line">    lst:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">10000</span>]<span class="keyword">of</span> longint;</span><br><span class="line">    n,i,a,b,tot,cnt:longint;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">link</span><span class="params">(a,b:longint)</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  inc(tot);</span><br><span class="line">  l[tot].pre:=lst[a];</span><br><span class="line">  lst[a]:=tot;</span><br><span class="line">  l[tot].ed:=b;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">path</span><span class="params">(x:longint)</span>:</span>boolean;</span><br><span class="line"><span class="keyword">var</span> k:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  k:=lst[x];</span><br><span class="line">  <span class="keyword">while</span> k&lt;&gt;<span class="number">0</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span> num[l[k].ed]&lt;&gt;cnt <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      num[l[k].ed]:=cnt;</span><br><span class="line">      <span class="keyword">if</span> (p[l[k].ed]=<span class="number">0</span>)<span class="keyword">or</span>(path(p[l[k].ed])) <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">begin</span></span><br><span class="line">        p[l[k].ed]:=x;</span><br><span class="line">        <span class="keyword">exit</span>(true);</span><br><span class="line">      <span class="keyword">end</span>;</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">    k:=l[k].pre;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">exit</span>(false);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hungary</span>:</span>longint;</span><br><span class="line"><span class="keyword">var</span> i:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  cnt:=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> <span class="number">10001</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    inc(cnt);</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> path(i) <span class="keyword">then</span> break;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">exit</span>(i-<span class="number">1</span>);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  readln(n);</span><br><span class="line">  tot:=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    readln(a,b);</span><br><span class="line">    link(a,i);</span><br><span class="line">    link(b,i);</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  writeln(hungary);</span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p><code>→_→</code><br>]]>
    
    </summary>
    
      <category term="Bipartite-Graph Matching" scheme="http://platypuspro.github.io/tags/Bipartite-Graph-Matching/"/>
    
      <category term="BZOJ" scheme="http://platypuspro.github.io/categories/BZOJ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[BZOJ 1857]]></title>
    <link href="http://platypuspro.github.io/posts/bzoj-1857/"/>
    <id>http://platypuspro.github.io/posts/bzoj-1857/</id>
    <published>2015-03-16T12:43:13.000Z</published>
    <updated>2015-03-16T13:37:22.000Z</updated>
    <content type="html"><![CDATA[<p><code>/3</code><br><a id="more"></a><br><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1857" target="_blank" rel="external">传送门</a></p>
<p><del>尼玛BZOJ刚刚又挂了好几个小时</del></p>
<p>自己YY一下，在每个传送带上不同位置时的答案一定是个单峰函数，有最优解，所以就用三分好了</p>
<blockquote>
<p>二分用来求可行答案，三分用来求最优答案 ——ZYK</p>
</blockquote>
<p>先三分枚举其中一个传送带上的点，然后再套一个三分看看这个点在另一条传送带上的最优解如何，挑两个答案中比较近的更新三分的左右端点</p>
<p>应该是比较容易理解的吧…</p>
<p>注意这道题会出现AB两点重合的情况，我把原来的<code>while</code>改成了<code>repeat</code>，保证至少算一次最优解（<code>while</code>的话会不满足条件直接跳出，<code>repeat</code>就不会了）</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">program</span> bzoj_1857;</span><br><span class="line"><span class="keyword">const</span> eps=<span class="number">1</span>e-<span class="number">3</span>;</span><br><span class="line"><span class="keyword">type</span> point=<span class="keyword">record</span> x,y:extended; <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">var</span> a,b,c,d,s1,s2,l,r:point;</span><br><span class="line">    v1,v2,v3:longint;</span><br><span class="line">    a1,a2,ans:extended;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dis</span><span class="params">(a,b:point)</span>:</span>extended;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">exit</span>(sqrt(sqr(a.x-b.x)+sqr(a.y-b.y)));</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calc</span><span class="params">(p:point)</span>:</span>extended;</span><br><span class="line"><span class="keyword">var</span> l,r,s1,s2:point;</span><br><span class="line">    a1,a2:extended;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  l:=c;</span><br><span class="line">  r:=d;</span><br><span class="line">  <span class="keyword">repeat</span></span><br><span class="line">    s1.x:=l.x+(r.x-l.x)/<span class="number">3</span>;</span><br><span class="line">    s1.y:=l.y+(r.y-l.y)/<span class="number">3</span>;</span><br><span class="line">    s2.x:=r.x-(r.x-l.x)/<span class="number">3</span>;</span><br><span class="line">    s2.y:=r.y-(r.y-l.y)/<span class="number">3</span>;</span><br><span class="line">    a1:=dis(a,p)/v1+dis(p,s1)/v3+dis(s1,d)/v2;</span><br><span class="line">    a2:=dis(a,p)/v1+dis(p,s2)/v3+dis(s2,d)/v2;</span><br><span class="line">    <span class="keyword">if</span> a1&lt;a2 <span class="keyword">then</span> r:=s2 <span class="keyword">else</span> l:=s1;</span><br><span class="line">  <span class="keyword">until</span> dis(l,r)&lt;eps;</span><br><span class="line">  <span class="keyword">if</span> a1&lt;a2 <span class="keyword">then</span> <span class="keyword">exit</span>(a1) <span class="keyword">else</span> <span class="keyword">exit</span>(a2);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">read</span>(a.x,a.y,b.x,b.y,c.x,c.y,d.x,d.y);</span><br><span class="line">  <span class="keyword">read</span>(v1,v2,v3);</span><br><span class="line">  l:=a;</span><br><span class="line">  r:=b;</span><br><span class="line">  ans:=maxlongint;</span><br><span class="line">  <span class="keyword">repeat</span></span><br><span class="line">    s1.x:=l.x+(r.x-l.x)/<span class="number">3</span>;</span><br><span class="line">    s1.y:=l.y+(r.y-l.y)/<span class="number">3</span>;</span><br><span class="line">    s2.x:=r.x-(r.x-l.x)/<span class="number">3</span>;</span><br><span class="line">    s2.y:=r.y-(r.y-l.y)/<span class="number">3</span>;</span><br><span class="line">    a1:=calc(s1);</span><br><span class="line">    a2:=calc(s2);</span><br><span class="line">    <span class="keyword">if</span> a1&lt;ans <span class="keyword">then</span> ans:=a1;</span><br><span class="line">    <span class="keyword">if</span> a2&lt;ans <span class="keyword">then</span> ans:=a2;</span><br><span class="line">    <span class="keyword">if</span> a1&lt;a2 <span class="keyword">then</span> r:=s2 <span class="keyword">else</span> l:=s1;</span><br><span class="line">  <span class="keyword">until</span> dis(l,r)&lt;eps;</span><br><span class="line">  writeln(ans:<span class="number">0</span>:<span class="number">2</span>);</span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p><code>/3</code><br>]]>
    
    </summary>
    
      <category term="Divide and Conquer" scheme="http://platypuspro.github.io/tags/Divide-and-Conquer/"/>
    
      <category term="BZOJ" scheme="http://platypuspro.github.io/categories/BZOJ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[BZOJ 2539]]></title>
    <link href="http://platypuspro.github.io/posts/bzoj-2539/"/>
    <id>http://platypuspro.github.io/posts/bzoj-2539/</id>
    <published>2015-03-13T13:25:46.000Z</published>
    <updated>2015-03-13T13:46:48.000Z</updated>
    <content type="html"><![CDATA[<p><del>为什么没有只显示标题的选项呢</del><br><a id="more"></a><br><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2539" target="_blank" rel="external">传送门</a></p>
<p>黑书上二分图最优匹配的例题<del>尼玛黑书上说了跟没说一样</del></p>
<p>直接上KM或费用流就可以了 但是好坑啊 QAQ</p>
<p>是否共线直接暴力用叉积和横纵坐标比较就行，名字用哈希乱搞，但是坑真多 = =</p>
<ol>
<li><p>名字大小写不分 <code>Shit=SHIT</code></p>
</li>
<li><p>题目未涉及的两人之间缘分为<code>1</code></p>
</li>
<li><p>如果发现题目给出的两人的线无法连接，则记得把权值赋为<code>-inf</code></p>
</li>
<li><p>还有个我爬了半天的坑是：尼玛没涉及的俩人如果超射程的话连<code>1</code>的缘分也没有，不要这么绝情好不好…</p>
</li>
</ol>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">program</span> bzoj_2539;</span><br><span class="line"><span class="keyword">const</span> mo=<span class="number">1007</span>;</span><br><span class="line">      inf=maxlongint&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">type</span> rec=<span class="keyword">record</span> x,y,h:longint; <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">var</span> pos:<span class="keyword">array</span>[<span class="number">0</span>..mo]<span class="keyword">of</span> longint;</span><br><span class="line">    per:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">60</span>]<span class="keyword">of</span> rec;</span><br><span class="line">    w:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">30</span>,<span class="number">1</span>..<span class="number">30</span>]<span class="keyword">of</span> longint;</span><br><span class="line">    lx,ly,slack,p:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">30</span>]<span class="keyword">of</span> longint;</span><br><span class="line">    vx,vy:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">30</span>]<span class="keyword">of</span> boolean;</span><br><span class="line">    k,n,i,endf,a,b,t,ans:longint;</span><br><span class="line">    s:<span class="keyword">string</span>;</span><br><span class="line">    c:char;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hash</span>:</span>longint;</span><br><span class="line"><span class="keyword">var</span> i:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  hash:=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> length(s) <span class="keyword">do</span> hash:=(hash*<span class="number">107</span>+ord(s[i])*<span class="number">31</span>)<span class="keyword">mod</span> mo;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dis</span><span class="params">(x1,y1,x2,y2:longint)</span>:</span>longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">exit</span>(sqr(x2-x1)+sqr(y2-y1));</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bulb</span><span class="params">(a,b:longint)</span>:</span>boolean;</span><br><span class="line"><span class="keyword">var</span> i:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n&lt;&lt;<span class="number">1</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span> (i=a)<span class="keyword">or</span>(i=b) <span class="keyword">then</span> continue;</span><br><span class="line">    <span class="keyword">if</span> (per[i].x-per[a].x)*(per[i].x-per[b].x)&gt;<span class="number">0</span> <span class="keyword">then</span> continue;</span><br><span class="line">    <span class="keyword">if</span> (per[i].y-per[a].y)*(per[i].y-per[b].y)&gt;<span class="number">0</span> <span class="keyword">then</span> continue;</span><br><span class="line">    <span class="keyword">if</span> (per[i].x-per[a].x)*(per[b].y-per[i].y)=(per[b].x-per[i].x)*(per[i].y-per[a].y) <span class="keyword">then</span> <span class="keyword">exit</span>(true);</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">exit</span>(false);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">path</span><span class="params">(x:longint)</span>:</span>boolean;</span><br><span class="line"><span class="keyword">var</span> i,t:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  vx[x]:=true;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span> vy[i] <span class="keyword">then</span> continue;</span><br><span class="line">    t:=lx[x]+ly[i]-w[x,i];</span><br><span class="line">    <span class="keyword">if</span> t=<span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      vy[i]:=true;</span><br><span class="line">      <span class="keyword">if</span> (p[i]=<span class="number">0</span>)<span class="keyword">or</span>(path(p[i])) <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">begin</span></span><br><span class="line">        p[i]:=x;</span><br><span class="line">        <span class="keyword">exit</span>(true);</span><br><span class="line">      <span class="keyword">end</span>;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> t&lt;slack[i] <span class="keyword">then</span> slack[i]:=t;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">exit</span>(false);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">KM</span>;</span></span><br><span class="line"><span class="keyword">var</span> i,x,d:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  fillchar(ly,sizeof(ly),<span class="number">0</span>);</span><br><span class="line">  fillchar(p,sizeof(p),<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span> x:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    fillchar(slack,sizeof(slack),$<span class="number">3</span>f);</span><br><span class="line">    <span class="keyword">repeat</span></span><br><span class="line">      fillchar(vx,sizeof(vx),false);</span><br><span class="line">      fillchar(vy,sizeof(vy),false);</span><br><span class="line">      <span class="keyword">if</span> path(x) <span class="keyword">then</span> break;</span><br><span class="line">      d:=inf;</span><br><span class="line">      <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span> <span class="keyword">if</span> (<span class="keyword">not</span> vy[i])<span class="keyword">and</span>(slack[i]&lt;d) <span class="keyword">then</span> d:=slack[i];</span><br><span class="line">      <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span> <span class="keyword">if</span> vx[i] <span class="keyword">then</span> dec(lx[i],d);</span><br><span class="line">      <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span> <span class="keyword">if</span> vy[i] <span class="keyword">then</span> inc(ly[i],d);</span><br><span class="line">    <span class="keyword">until</span> false;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span> <span class="keyword">if</span> p[i]&lt;&gt;<span class="number">0</span> <span class="keyword">then</span> inc(ans,w[p[i],i]);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  readln(k);</span><br><span class="line">  readln(n);</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n&lt;&lt;<span class="number">1</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">read</span>(per[i].x,per[i].y,c);</span><br><span class="line">    <span class="keyword">read</span>(c);</span><br><span class="line">    s:=<span class="string">''</span>;</span><br><span class="line">    <span class="keyword">while</span> c <span class="keyword">in</span> [<span class="string">'A'</span>..<span class="string">'z'</span>] <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      s:=s+c;</span><br><span class="line">      <span class="keyword">read</span>(c);</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">    s:=upcase(s);</span><br><span class="line">    readln;</span><br><span class="line">    pos[hash]:=i;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">for</span> a:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">for</span> b:=n+<span class="number">1</span> <span class="keyword">to</span> n&lt;&lt;<span class="number">1</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> (dis(per[a].x,per[a].y,per[b].x,per[b].y)&lt;=k*k)<span class="keyword">and</span>(<span class="keyword">not</span> bulb(a,b)) <span class="keyword">then</span> w[a,b-n]:=<span class="number">1</span> <span class="keyword">else</span> w[a,b-n]:=-inf;</span><br><span class="line">  s:=<span class="string">'END'</span>;</span><br><span class="line">  endf:=hash;</span><br><span class="line">  fillchar(lx,sizeof(lx),<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">repeat</span></span><br><span class="line">    <span class="keyword">read</span>(c);</span><br><span class="line">    s:=<span class="string">''</span>;</span><br><span class="line">    <span class="keyword">while</span> c <span class="keyword">in</span> [<span class="string">'A'</span>..<span class="string">'z'</span>] <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      s:=s+c;</span><br><span class="line">      <span class="keyword">read</span>(c);</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">    s:=upcase(s);</span><br><span class="line">    a:=hash;</span><br><span class="line">    <span class="keyword">if</span> a=endf <span class="keyword">then</span> break;</span><br><span class="line">    <span class="keyword">read</span>(c);</span><br><span class="line">    s:=<span class="string">''</span>;</span><br><span class="line">    <span class="keyword">while</span> c <span class="keyword">in</span> [<span class="string">'A'</span>..<span class="string">'z'</span>] <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      s:=s+c;</span><br><span class="line">      <span class="keyword">read</span>(c);</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">    s:=upcase(s);</span><br><span class="line">    b:=hash;</span><br><span class="line">    <span class="keyword">if</span> pos[a]&gt;n <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      t:=a;</span><br><span class="line">      a:=b;</span><br><span class="line">      b:=t;</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">    a:=pos[a];</span><br><span class="line">    b:=pos[b];</span><br><span class="line">    readln(t);</span><br><span class="line">    <span class="keyword">if</span> (dis(per[a].x,per[a].y,per[b].x,per[b].y)&gt;k*k)<span class="keyword">or</span>(bulb(a,b)) <span class="keyword">then</span> continue;</span><br><span class="line">    w[a,b-n]:=t;</span><br><span class="line">    <span class="keyword">if</span> w[a,b-n]&gt;lx[a] <span class="keyword">then</span> lx[a]:=w[a,b-n];</span><br><span class="line">  <span class="keyword">until</span> false;</span><br><span class="line">  ans:=<span class="number">0</span>;</span><br><span class="line">  KM;</span><br><span class="line">  writeln(ans);</span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p><del>为什么没有只显示标题的选项呢</del><br>]]>
    
    </summary>
    
      <category term="Bipartite-Graph Matching" scheme="http://platypuspro.github.io/tags/Bipartite-Graph-Matching/"/>
    
      <category term="Kuhn-Munkres" scheme="http://platypuspro.github.io/tags/Kuhn-Munkres/"/>
    
      <category term="BZOJ" scheme="http://platypuspro.github.io/categories/BZOJ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Kuhn-Munkres]]></title>
    <link href="http://platypuspro.github.io/posts/km/"/>
    <id>http://platypuspro.github.io/posts/km/</id>
    <published>2015-03-13T07:40:24.000Z</published>
    <updated>2015-03-18T02:39:10.000Z</updated>
    <content type="html"><![CDATA[<p>关于KM算法呢…我还没完全搞懂 = = 先扯点我的理解<del>来骗访问量</del>…<br><a id="more"></a><br>大概就是加了顶标的Hungary…然后增广时判断的条件改了一下吧…</p>
<p>对于每个<code>x</code>点记录下顶标<code>label_x</code>，每个<code>y</code>点记录顶标<code>label_y</code><br>初始时<code>label_x[i]</code>的值为与点<code>i</code>相连所有边权值的最大值，<code>label_y</code>都赋为<code>0</code>，这样的话根据下面的增广条件能确保每条边都能够走到</p>
<p>每条边允许通过的条件是<code>label_x[i]+label_y[j]=w[i,j]</code>，如果在当前基础上找不到增广路，则将顶标调整一下，把访问过的<code>x</code>点的顶标减掉一个值<code>d</code>，把访问过的<code>y</code>点的顶标加上一个值<code>d</code>（这样能将更多的边添加进来，证明网上都有），<code>d</code>的值是所有未访问的<code>y</code>点最小的<code>label_x+label_y-w</code>（我太水说不清楚…有啥不懂的直接看代码好了…）可以对每个<code>y</code>点记录与之相连<code>x</code>点中最小的<code>label_x+label_y-w</code></p>
<blockquote>
<p>感觉说的乱七八糟的…贴几个别人的讲解好了…Orz<br><a href="http://blog.csdn.net/niushuai666/article/details/7171880" target="_blank" rel="external">飘过的小牛</a><br><a href="https://www.byvoid.com/blog/match-km/" target="_blank" rel="external">BYVoid</a><br><a href="http://cuitianyi.com/blog/%E6%B1%82%E6%9C%80%E5%A4%A7%E6%9D%83%E4%BA%8C%E5%88%86%E5%8C%B9%E9%85%8D%E7%9A%84km%E7%AE%97%E6%B3%95/" target="_blank" rel="external">Cui Tianyi</a><br><a href="http://www.cppblog.com/MatoNo1/archive/2011/07/23/151724.aspx" target="_blank" rel="external">Mato</a></p>
</blockquote>
<p>这是我<del>照别人的</del>写的裸模板<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">program</span> KM;</span><br><span class="line"><span class="keyword">const</span> maxn=<span class="number">1000</span>;</span><br><span class="line">      inf=maxlongint&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> lx,ly,slack,pair:<span class="keyword">array</span>[<span class="number">1</span>..maxn]<span class="keyword">of</span> longint;</span><br><span class="line">    w:<span class="keyword">array</span>[<span class="number">1</span>..maxn,<span class="number">1</span>..maxn]<span class="keyword">of</span> longint;</span><br><span class="line">    vx,vy:<span class="keyword">array</span>[<span class="number">1</span>..maxn]<span class="keyword">of</span> boolean;</span><br><span class="line">    nx,ny,m,i,a,b,ans:longint;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">path</span><span class="params">(x:longint)</span>:</span>boolean;</span><br><span class="line"><span class="keyword">var</span> i,t:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  vx[x]:=true;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> ny <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span> vy[i] <span class="keyword">then</span> continue;</span><br><span class="line">    t:=lx[x]+ly[i]-w[x,i];</span><br><span class="line">    <span class="keyword">if</span> t=<span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      vy[i]:=true;</span><br><span class="line">      <span class="keyword">if</span> (pair[i]=<span class="number">0</span>)<span class="keyword">or</span>(path(pair[i])) <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">begin</span></span><br><span class="line">        pair[i]:=x;</span><br><span class="line">        <span class="keyword">exit</span>(true);</span><br><span class="line">      <span class="keyword">end</span>;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> t&lt;slack[i] <span class="keyword">then</span> slack[i]:=t;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">exit</span>(false);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">KM</span>;</span></span><br><span class="line"><span class="keyword">var</span> x,i,d:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  fillchar(pair,sizeof(pair),<span class="number">0</span>);</span><br><span class="line">  fillchar(ly,sizeof(ly),<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span> x:=<span class="number">1</span> <span class="keyword">to</span> nx <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    fillchar(slack,sizeof(slack),$<span class="number">3</span>f);</span><br><span class="line">    <span class="keyword">repeat</span></span><br><span class="line">      fillchar(vx,sizeof(vx),false);</span><br><span class="line">      fillchar(vy,sizeof(vy),false);</span><br><span class="line">      <span class="keyword">if</span> path(x) <span class="keyword">then</span> break;</span><br><span class="line">      d:=inf;</span><br><span class="line">      <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> ny <span class="keyword">do</span> <span class="keyword">if</span> (<span class="keyword">not</span> vy[i])<span class="keyword">and</span>(slack[i]&lt;d) <span class="keyword">then</span> d:=slack[i];</span><br><span class="line">      <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> nx <span class="keyword">do</span> <span class="keyword">if</span> vx[i] <span class="keyword">then</span> dec(lx[i],d);</span><br><span class="line">      <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> ny <span class="keyword">do</span> <span class="keyword">if</span> vy[i] <span class="keyword">then</span> inc(ly[i],d);</span><br><span class="line">    <span class="keyword">until</span> false;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> ny <span class="keyword">do</span> <span class="keyword">if</span> pair[i]&lt;&gt;<span class="number">0</span> <span class="keyword">then</span> inc(ans,w[pair[i],i]);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  readln(nx,ny,m);</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> nx <span class="keyword">do</span> lx[i]:=-inf;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> m <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">read</span>(a,b);</span><br><span class="line">    readln(w[a,b]);</span><br><span class="line">    <span class="keyword">if</span> w[a,b]&gt;lx[a] <span class="keyword">then</span> lx[a]:=w[a,b];</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  ans:=<span class="number">0</span>;</span><br><span class="line">  KM;</span><br><span class="line">  writeln(ans);</span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>关于KM算法呢…我还没完全搞懂 = = 先扯点我的理解<del>来骗访问量</del>…<br>]]>
    
    </summary>
    
      <category term="Bipartite-Graph Matching" scheme="http://platypuspro.github.io/tags/Bipartite-Graph-Matching/"/>
    
      <category term="Algorithm" scheme="http://platypuspro.github.io/categories/algorithm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hungary]]></title>
    <link href="http://platypuspro.github.io/posts/hungary/"/>
    <id>http://platypuspro.github.io/posts/hungary/</id>
    <published>2015-03-12T10:33:38.000Z</published>
    <updated>2015-03-12T13:49:32.000Z</updated>
    <content type="html"><![CDATA[<p>hung<del>a</del>ry 咕…<br><a id="more"></a><br>对Hungary<del>极其SB</del>通俗易懂的理解是：</p>
<blockquote>
<p>这个点是我的，你走开，去别处再找，拜拜~<br>什么？你找不到点了啊？那我再去找别的好了…</p>
</blockquote>
<p>其实也没什么好讲的，未盖点交错路可增广路什么的真麻烦，举俩例子看看代码就懂了</p>
<p><img src="/img/hungary_1.png" alt=""><br>如上图所示，刚开始<code>x1</code>找到了<code>y1</code>，记录下当前<code>y1</code>与<code>x1</code>匹配<code>（pair[y1]:=x1)</code></p>
<p><img src="/img/hungary_2.png" alt=""><br>然后是<code>x2</code>，<code>x2</code>发现了<code>y1</code>，于是顺着<code>pair[y1]</code>发现了<code>x1</code>，于是呢，<code>x2</code>就和<code>x1</code>商量：这个点归我好不好，你再找找…<br>于是再调用寻找函数看<code>x1</code>还能不能找到另一个匹配点，然后<code>x1</code>发现了<code>y2</code>，<del>他们快乐地生活在了一起</del></p>
<p><img src="/img/hungary_3.png" alt=""><br>然后函数一层层返回时修改每个点与哪个点匹配</p>
<p>举个同时改多个点的例子</p>
<p><img src="/img/hungary_4.png" alt=""><br>匹配到前三个点时是这样的</p>
<p><img src="/img/hungary_5.png" alt=""><br>然后匹配第四个点时就会是这样了，<code>x4</code>抢走了<code>y1</code>，别的结点都找到了另外一个自己的匹配</p>
<p>完了 = = 下面贴上丑代码</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">program</span> hungary;</span><br><span class="line"><span class="keyword">const</span> maxn=<span class="number">1000</span>;</span><br><span class="line"><span class="keyword">var</span> pair:<span class="keyword">array</span>[<span class="number">1</span>..maxn]<span class="keyword">of</span> longint;</span><br><span class="line">    link:<span class="keyword">array</span>[<span class="number">1</span>..maxn,<span class="number">1</span>..maxn]<span class="keyword">of</span> boolean;</span><br><span class="line">    v:<span class="keyword">array</span>[<span class="number">1</span>..maxn]<span class="keyword">of</span> boolean;</span><br><span class="line">    nx,ny,m,i,a,b,match:longint;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">path</span><span class="params">(x:longint)</span>:</span>boolean;</span><br><span class="line"><span class="keyword">var</span> i:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> ny <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> link[x,i] <span class="keyword">and</span> <span class="keyword">not</span> v[i] <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    v[i]:=true;</span><br><span class="line">    <span class="keyword">if</span> (pair[i]=<span class="number">0</span>)<span class="keyword">or</span>(path(pair[i])) <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      pair[i]:=x;</span><br><span class="line">      <span class="keyword">exit</span>(true);</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">exit</span>(false);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">hungary</span>;</span></span><br><span class="line"><span class="keyword">var</span> i:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> nx <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    fillchar(v,sizeof(v),false);</span><br><span class="line">    <span class="keyword">if</span> path(i) <span class="keyword">then</span> inc(match);</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  readln(nx,ny,m);</span><br><span class="line">  fillchar(link,sizeof(link),false);</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> m <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    readln(a,b);</span><br><span class="line">    link[a,b]:=true;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  match:=<span class="number">0</span>;</span><br><span class="line">  fillchar(pair,sizeof(pair),<span class="number">0</span>);</span><br><span class="line">  hungary;</span><br><span class="line">  writeln(match);</span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure>
<p><del>其实只是测试一下文章里插入本地图片  &gt;_&lt;…</del></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>hung<del>a</del>ry 咕…<br>]]>
    
    </summary>
    
      <category term="Bipartite-Graph Matching" scheme="http://platypuspro.github.io/tags/Bipartite-Graph-Matching/"/>
    
      <category term="Algorithm" scheme="http://platypuspro.github.io/categories/algorithm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[BZOJ 2300]]></title>
    <link href="http://platypuspro.github.io/posts/bzoj-2300/"/>
    <id>http://platypuspro.github.io/posts/bzoj-2300/</id>
    <published>2015-03-11T23:55:51.000Z</published>
    <updated>2015-03-12T13:49:10.000Z</updated>
    <content type="html"><![CDATA[<p>- ( ゜- ゜)つロ 乾杯~<br><a id="more"></a><br><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2300" target="_blank" rel="external">题目传送门</a></p>
<p>凸包 动态删点并询问当前凸包周长</p>
<p>这道题在线应该也可以，但离线一下就比较好想了，动态删点变成了动态加点</p>
<p>先离线并记录哪些城市始终需要保护，然后把初始的三个点加进去，再把始终要保护的城市加进去并维护</p>
<p>然后倒着来依次加点<del>（别人都用Treap Set神马的，尼玛真短…只会SBT…）</del>，每次加点的步骤如下：</p>
<p>&#160; &#160; &#160; &#160;1.找到在凸包中的前驱节点（左边的点）<code>l</code>与后继节点（右边的点）<code>r</code>，用叉积判断如果在直线<code>lr</code>内侧就说明在凸包内侧然后跳出，否则说明<code>lr</code>这条边一定要删然后删掉并继续</p>
<p>&#160; &#160; &#160; &#160;2.找到<code>l</code>的前驱<code>ll</code>，如果当前要插入的点在<code>l</code>与<code>ll</code>连线的外侧说明<code>l</code>到<code>ll</code>的线段将被覆盖（也就是说<code>l</code>将被覆盖），删掉<code>l</code>这个点，更新答案，从<code>ll</code>继续往下找，重复以上步骤直到找到最左端结点或发现不能覆盖节点<code>l</code>，然后将新连的边加入答案</p>
<p>&#160; &#160; &#160; &#160;3.右端的操作类似</p>
<p>&#160; &#160; &#160; &#160;4.将当前点加入<del>肯德基豪华午餐，仅需15元</del>凸包</p>
<blockquote>
<h3 id="Tips">Tips</h3><p>如果每次修改都重新计算一遍凸包周长肯定慢死，所以开一个全局变量记录当前凸包周长修改时改这个就好了，反正一步步修改每一步只改一条边</p>
<p>求前驱和后继一定注意要找与当前点不同的，要不然不存在直线的</p>
<p>叉积真是个好东西…</p>
</blockquote>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">program</span> bzoj_2300;</span><br><span class="line"><span class="keyword">type</span> point=<span class="keyword">record</span> x,y:longint; <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">var</span> p:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">100000</span>]<span class="keyword">of</span> point;</span><br><span class="line">    q:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">200000</span>]<span class="keyword">of</span> longint;</span><br><span class="line">    ans:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">200000</span>]<span class="keyword">of</span> extended;</span><br><span class="line">    curans:extended;</span><br><span class="line">    n,m,query,i,k,tot,root:longint;</span><br><span class="line">    cap:point;</span><br><span class="line">    s:<span class="keyword">array</span>[<span class="number">0</span>..<span class="number">100000</span>]<span class="keyword">of</span> <span class="keyword">record</span> lc,rc,size,x,y:longint; <span class="keyword">end</span>;</span><br><span class="line">    flag:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">100000</span>]<span class="keyword">of</span> boolean;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sml</span><span class="params">(x1,y1,x2,y2:longint)</span>:</span>boolean;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">if</span> (x1&lt;&gt;x2) <span class="keyword">then</span> <span class="keyword">exit</span>(x1&lt;x2);</span><br><span class="line">  <span class="keyword">exit</span>(y1&lt;y2);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dis</span><span class="params">(x1,y1,x2,y2:longint)</span>:</span>extended;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">exit</span>(sqrt(sqr(x2-x1)+sqr(y2-y1)));</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cross</span><span class="params">(x1,y1,x2,y2:longint)</span>:</span>longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">exit</span>(x1*y2-x2*y1);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">l_rotate</span><span class="params">(<span class="keyword">var</span> t:longint)</span>;</span></span><br><span class="line"><span class="keyword">var</span> k:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  k:=s[t].rc;</span><br><span class="line">  s[t].rc:=s[k].lc;</span><br><span class="line">  s[k].lc:=t;</span><br><span class="line">  s[k].size:=s[t].size;</span><br><span class="line">  s[t].size:=s[s[t].lc].size+s[s[t].rc].size+<span class="number">1</span>;</span><br><span class="line">  t:=k;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">r_rotate</span><span class="params">(<span class="keyword">var</span> t:longint)</span>;</span></span><br><span class="line"><span class="keyword">var</span> k:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  k:=s[t].lc;</span><br><span class="line">  s[t].lc:=s[k].rc;</span><br><span class="line">  s[k].rc:=t;</span><br><span class="line">  s[k].size:=s[t].size;</span><br><span class="line">  s[t].size:=s[s[t].lc].size+s[s[t].rc].size+<span class="number">1</span>;</span><br><span class="line">  t:=k;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">maintain</span><span class="params">(<span class="keyword">var</span> t:longint;flag:boolean)</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> flag <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">if</span> s[s[s[t].lc].lc].size&gt;s[s[t].rc].size <span class="keyword">then</span> r_rotate(t) <span class="keyword">else</span></span><br><span class="line">  <span class="keyword">if</span> s[s[s[t].lc].rc].size&gt;s[s[t].rc].size <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    l_rotate(s[t].lc);</span><br><span class="line">    r_rotate(t);</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">exit</span>;</span><br><span class="line">  <span class="keyword">if</span> flag <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">if</span> s[s[s[t].rc].rc].size&gt;s[s[t].lc].size <span class="keyword">then</span> l_rotate(t) <span class="keyword">else</span></span><br><span class="line">  <span class="keyword">if</span> s[s[s[t].rc].lc].size&gt;s[s[t].lc].size <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    r_rotate(s[t].rc);</span><br><span class="line">    l_rotate(t);</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">exit</span>;</span><br><span class="line">  maintain(s[t].lc,false);</span><br><span class="line">  maintain(s[t].rc,true);</span><br><span class="line">  maintain(t,false);</span><br><span class="line">  maintain(t,true);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">insert</span><span class="params">(<span class="keyword">var</span> t:longint;x,y:longint)</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">if</span> t=<span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    inc(tot);</span><br><span class="line">    t:=tot;</span><br><span class="line">    s[t].x:=x;</span><br><span class="line">    s[t].y:=y;</span><br><span class="line">    s[t].size:=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  inc(s[t].size);</span><br><span class="line">  <span class="keyword">if</span> sml(x,y,s[t].x,s[t].y) <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    insert(s[t].lc,x,y);</span><br><span class="line">    maintain(t,false);</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">else</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    insert(s[t].rc,x,y);</span><br><span class="line">    maintain(t,true);</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pred</span><span class="params">(t,x,y:longint)</span>:</span>point;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  pred.x:=<span class="number">0</span>;</span><br><span class="line">  pred.y:=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> t&lt;&gt;<span class="number">0</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> sml(x,y,s[t].x,s[t].y)<span class="keyword">or</span>((s[t].x=x)<span class="keyword">and</span>(s[t].y=y)) <span class="keyword">then</span> t:=s[t].lc <span class="keyword">else</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    pred.x:=s[t].x;</span><br><span class="line">    pred.y:=s[t].y;</span><br><span class="line">    t:=s[t].rc;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">succ</span><span class="params">(t,x,y:longint)</span>:</span>point;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  succ.x:=n;</span><br><span class="line">  succ.y:=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> t&lt;&gt;<span class="number">0</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> sml(s[t].x,s[t].y,x,y)<span class="keyword">or</span>((s[t].x=x)<span class="keyword">and</span>(s[t].y=y)) <span class="keyword">then</span> t:=s[t].rc <span class="keyword">else</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    succ.x:=s[t].x;</span><br><span class="line">    succ.y:=s[t].y;</span><br><span class="line">    t:=s[t].lc;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delete</span><span class="params">(<span class="keyword">var</span> t:longint;x,y:longint)</span>:</span>longint;</span><br><span class="line"><span class="keyword">var</span> d:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  dec(s[t].size);</span><br><span class="line">  <span class="keyword">if</span> ((s[t].x=x)<span class="keyword">and</span>(s[t].y=y))<span class="keyword">or</span>(sml(x,y,s[t].x,s[t].y)<span class="keyword">and</span>(s[t].lc=<span class="number">0</span>))<span class="keyword">or</span>(sml(s[t].x,s[t].y,x,y)<span class="keyword">and</span>(s[t].rc=<span class="number">0</span>)) <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    delete:=t;</span><br><span class="line">    <span class="keyword">if</span> (s[t].lc=<span class="number">0</span>)<span class="keyword">or</span>(s[t].rc=<span class="number">0</span>) <span class="keyword">then</span> t:=s[t].lc+s[t].rc <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      d:=delete(s[t].lc,x,y+<span class="number">1</span>);</span><br><span class="line">      s[t].x:=s[d].x;</span><br><span class="line">      s[t].y:=s[d].y;</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">else</span></span><br><span class="line">  <span class="keyword">if</span> sml(x,y,s[t].x,s[t].y) <span class="keyword">then</span> <span class="keyword">exit</span>(delete(s[t].lc,x,y)) <span class="keyword">else</span> <span class="keyword">exit</span>(delete(s[t].rc,x,y));</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">addpoint</span><span class="params">(x,y:longint)</span>;</span></span><br><span class="line"><span class="keyword">var</span> l,r,ll,rr:point;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  l:=pred(root,x,y);</span><br><span class="line">  r:=succ(root,x,y);</span><br><span class="line">  <span class="keyword">if</span> cross(x-l.x,y-l.y,r.x-l.x,r.y-l.y)&gt;=<span class="number">0</span> <span class="keyword">then</span> <span class="keyword">exit</span>;</span><br><span class="line">  curans:=curans-dis(l.x,l.y,r.x,r.y);</span><br><span class="line">  <span class="keyword">while</span> (l.x&lt;&gt;<span class="number">0</span>)<span class="keyword">and</span>(l.y&lt;&gt;<span class="number">0</span>) <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    ll:=pred(root,l.x,l.y);</span><br><span class="line">    <span class="keyword">if</span> cross(x-l.x,y-l.y,ll.x-l.x,ll.y-l.y)&gt;=<span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      curans:=curans-dis(l.x,l.y,ll.x,ll.y);</span><br><span class="line">      delete(root,l.x,l.y);</span><br><span class="line">      l:=ll;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">else</span> break;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  curans:=curans+dis(l.x,l.y,x,y);</span><br><span class="line">  <span class="keyword">while</span> (r.x&lt;n)<span class="keyword">and</span>(r.y&lt;&gt;<span class="number">0</span>) <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    rr:=succ(root,r.x,r.y);</span><br><span class="line">    <span class="keyword">if</span> cross(x-r.x,y-r.y,rr.x-r.x,rr.y-r.y)&lt;=<span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      curans:=curans-dis(r.x,r.y,rr.x,rr.y);</span><br><span class="line">      delete(root,r.x,r.y);</span><br><span class="line">      r:=rr;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">else</span> break;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  curans:=curans+dis(r.x,r.y,x,y);</span><br><span class="line">  insert(root,x,y);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  readln(n,cap.x,cap.y);</span><br><span class="line">  readln(m);</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> m <span class="keyword">do</span> <span class="keyword">read</span>(p[i].x,p[i].y);</span><br><span class="line">  readln(query);</span><br><span class="line">  fillchar(q,sizeof(q),<span class="number">0</span>);</span><br><span class="line">  root:=<span class="number">0</span>;</span><br><span class="line">  tot:=<span class="number">0</span>;</span><br><span class="line">  fillchar(s,sizeof(s),<span class="number">0</span>);</span><br><span class="line">  insert(root,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">  insert(root,n,<span class="number">0</span>);</span><br><span class="line">  insert(root,cap.x,cap.y);</span><br><span class="line">  curans:=dis(<span class="number">0</span>,<span class="number">0</span>,cap.x,cap.y)+dis(n,<span class="number">0</span>,cap.x,cap.y);</span><br><span class="line">  fillchar(flag,sizeof(flag),true);</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> query <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">read</span>(k);</span><br><span class="line">    <span class="keyword">if</span> k=<span class="number">2</span> <span class="keyword">then</span> continue;</span><br><span class="line">    <span class="keyword">read</span>(q[i]);</span><br><span class="line">    flag[q[i]]:=false;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> m <span class="keyword">do</span> <span class="keyword">if</span> flag[i] <span class="keyword">then</span> addpoint(p[i].x,p[i].y);</span><br><span class="line">  fillchar(ans,sizeof(ans),<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span> i:=query <span class="keyword">downto</span> <span class="number">1</span> <span class="keyword">do</span> <span class="keyword">if</span> q[i]=<span class="number">0</span> <span class="keyword">then</span> ans[i]:=curans <span class="keyword">else</span> addpoint(p[q[i]].x,p[q[i]].y);</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> query <span class="keyword">do</span> <span class="keyword">if</span> ans[i]&lt;&gt;<span class="number">0</span> <span class="keyword">then</span> writeln(ans[i]:<span class="number">0</span>:<span class="number">2</span>);</span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>- ( ゜- ゜)つロ 乾杯~<br>]]>
    
    </summary>
    
      <category term="Dynamic Convex Hull" scheme="http://platypuspro.github.io/tags/Dynamic-Convex-Hull/"/>
    
      <category term="BZOJ" scheme="http://platypuspro.github.io/categories/BZOJ/"/>
    
  </entry>
  
</feed>