<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Platypus Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://platypuspro.github.io/"/>
  <updated>2015-03-16T13:32:22.000Z</updated>
  <id>http://platypuspro.github.io/</id>
  
  <author>
    <name><![CDATA[Platypus]]></name>
    <email><![CDATA[1293705262@qq.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[BZOJ 1854]]></title>
    <link href="http://platypuspro.github.io/2015/03/16/bzoj-1854/"/>
    <id>http://platypuspro.github.io/2015/03/16/bzoj-1854/</id>
    <published>2015-03-16T13:02:53.000Z</published>
    <updated>2015-03-16T13:32:22.000Z</updated>
    <content type="html"><![CDATA[<p><code>→_→</code><br><a id="more"></a><br>1191的升级版，没写的<a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1191" target="_blank" rel="external">戳我</a></p>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1854" target="_blank" rel="external">传送门</a></p>
<p>每种装备的两个属性向这个装备的序号连边，因为边数点数好大所以要用链表</p>
<p>这道题直接用裸Hungary会在BZOJ上TLE <del>尼玛本地刚过2s啊交上去就T 6s+</del></p>
<p>瞅了瞅代码，发现每次增广都要<code>fillchar</code>一个<code>10^6</code>大小的布尔数组有点吃不消啊…</p>
<p>考虑一下优化的办法，因为每个代表装备的点只有两个点向其连边，所以直接记录下是与两个点中的哪一个连接，判断条件改一下就好了，这样也省了<code>fillchar</code></p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">program</span> bzoj_1854;</span><br><span class="line"><span class="keyword">const</span> maxn=<span class="number">1000000</span>;</span><br><span class="line"><span class="keyword">var</span> l:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">2</span>*maxn]<span class="keyword">of</span> <span class="keyword">record</span> ed,pre:longint; <span class="keyword">end</span>;</span><br><span class="line">    p,num:<span class="keyword">array</span>[<span class="number">1</span>..maxn]<span class="keyword">of</span> longint;</span><br><span class="line">    lst:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">10000</span>]<span class="keyword">of</span> longint;</span><br><span class="line">    n,i,a,b,tot,cnt:longint;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">link</span><span class="params">(a,b:longint)</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  inc(tot);</span><br><span class="line">  l[tot].pre:=lst[a];</span><br><span class="line">  lst[a]:=tot;</span><br><span class="line">  l[tot].ed:=b;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">path</span><span class="params">(x:longint)</span>:</span>boolean;</span><br><span class="line"><span class="keyword">var</span> k:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  k:=lst[x];</span><br><span class="line">  <span class="keyword">while</span> k&lt;&gt;<span class="number">0</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span> num[l[k].ed]&lt;&gt;cnt <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      num[l[k].ed]:=cnt;</span><br><span class="line">      <span class="keyword">if</span> (p[l[k].ed]=<span class="number">0</span>)<span class="keyword">or</span>(path(p[l[k].ed])) <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">begin</span></span><br><span class="line">        p[l[k].ed]:=x;</span><br><span class="line">        <span class="keyword">exit</span>(true);</span><br><span class="line">      <span class="keyword">end</span>;</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">    k:=l[k].pre;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">exit</span>(false);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hungary</span>:</span>longint;</span><br><span class="line"><span class="keyword">var</span> i:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  cnt:=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> <span class="number">10001</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    inc(cnt);</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> path(i) <span class="keyword">then</span> break;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">exit</span>(i-<span class="number">1</span>);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  readln(n);</span><br><span class="line">  tot:=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    readln(a,b);</span><br><span class="line">    link(a,i);</span><br><span class="line">    link(b,i);</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  writeln(hungary);</span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p><code>→_→</code><br>]]>
    
    </summary>
    
      <category term="Bipartite-Graph Matching" scheme="http://platypuspro.github.io/tags/Bipartite-Graph-Matching/"/>
    
      <category term="BZOJ" scheme="http://platypuspro.github.io/categories/BZOJ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[BZOJ 1857]]></title>
    <link href="http://platypuspro.github.io/2015/03/16/bzoj-1857/"/>
    <id>http://platypuspro.github.io/2015/03/16/bzoj-1857/</id>
    <published>2015-03-16T12:43:13.000Z</published>
    <updated>2015-03-16T13:37:20.000Z</updated>
    <content type="html"><![CDATA[<p><code>/3</code><br><a id="more"></a><br><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1857" target="_blank" rel="external">传送门</a></p>
<p><del>尼玛BZOJ刚刚又挂了好几个小时</del></p>
<p>自己YY一下，在每个传送带上不同位置时的答案一定是个单峰函数，有最优解，所以就用三分好了</p>
<blockquote>
<p>二分用来求可行答案，三分用来求最优答案 ——ZYK</p>
</blockquote>
<p>先三分枚举其中一个传送带上的点，然后再套一个三分看看这个点在另一条传送带上的最优解如何，挑两个答案中比较近的更新三分的左右端点</p>
<p>应该是比较容易理解的吧…</p>
<p>注意这道题会出现AB两点重合的情况，我把原来的<code>while</code>改成了<code>repeat</code>，保证至少算一次最优解（<code>while</code>的话会不满足条件直接跳出，<code>repeat</code>就不会了）</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">program</span> bzoj_1857;</span><br><span class="line"><span class="keyword">const</span> eps=<span class="number">1</span>e-<span class="number">3</span>;</span><br><span class="line"><span class="keyword">type</span> point=<span class="keyword">record</span> x,y:extended; <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">var</span> a,b,c,d,s1,s2,l,r:point;</span><br><span class="line">    v1,v2,v3:longint;</span><br><span class="line">    a1,a2,ans:extended;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dis</span><span class="params">(a,b:point)</span>:</span>extended;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">exit</span>(sqrt(sqr(a.x-b.x)+sqr(a.y-b.y)));</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calc</span><span class="params">(p:point)</span>:</span>extended;</span><br><span class="line"><span class="keyword">var</span> l,r,s1,s2:point;</span><br><span class="line">    a1,a2:extended;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  l:=c;</span><br><span class="line">  r:=d;</span><br><span class="line">  <span class="keyword">repeat</span></span><br><span class="line">    s1.x:=l.x+(r.x-l.x)/<span class="number">3</span>;</span><br><span class="line">    s1.y:=l.y+(r.y-l.y)/<span class="number">3</span>;</span><br><span class="line">    s2.x:=r.x-(r.x-l.x)/<span class="number">3</span>;</span><br><span class="line">    s2.y:=r.y-(r.y-l.y)/<span class="number">3</span>;</span><br><span class="line">    a1:=dis(a,p)/v1+dis(p,s1)/v3+dis(s1,d)/v2;</span><br><span class="line">    a2:=dis(a,p)/v1+dis(p,s2)/v3+dis(s2,d)/v2;</span><br><span class="line">    <span class="keyword">if</span> a1&lt;a2 <span class="keyword">then</span> r:=s2 <span class="keyword">else</span> l:=s1;</span><br><span class="line">  <span class="keyword">until</span> dis(l,r)&lt;eps;</span><br><span class="line">  <span class="keyword">if</span> a1&lt;a2 <span class="keyword">then</span> <span class="keyword">exit</span>(a1) <span class="keyword">else</span> <span class="keyword">exit</span>(a2);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">read</span>(a.x,a.y,b.x,b.y,c.x,c.y,d.x,d.y);</span><br><span class="line">  <span class="keyword">read</span>(v1,v2,v3);</span><br><span class="line">  l:=a;</span><br><span class="line">  r:=b;</span><br><span class="line">  ans:=maxlongint;</span><br><span class="line">  <span class="keyword">repeat</span></span><br><span class="line">    s1.x:=l.x+(r.x-l.x)/<span class="number">3</span>;</span><br><span class="line">    s1.y:=l.y+(r.y-l.y)/<span class="number">3</span>;</span><br><span class="line">    s2.x:=r.x-(r.x-l.x)/<span class="number">3</span>;</span><br><span class="line">    s2.y:=r.y-(r.y-l.y)/<span class="number">3</span>;</span><br><span class="line">    a1:=calc(s1);</span><br><span class="line">    a2:=calc(s2);</span><br><span class="line">    <span class="keyword">if</span> a1&lt;ans <span class="keyword">then</span> ans:=a1;</span><br><span class="line">    <span class="keyword">if</span> a2&lt;ans <span class="keyword">then</span> ans:=a2;</span><br><span class="line">    <span class="keyword">if</span> a1&lt;a2 <span class="keyword">then</span> r:=s2 <span class="keyword">else</span> l:=s1;</span><br><span class="line">  <span class="keyword">until</span> dis(l,r)&lt;eps;</span><br><span class="line">  writeln(ans:<span class="number">0</span>:<span class="number">2</span>);</span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p><code>/3</code><br>]]>
    
    </summary>
    
      <category term="Divide and Conquer" scheme="http://platypuspro.github.io/tags/Divide-and-Conquer/"/>
    
      <category term="BZOJ" scheme="http://platypuspro.github.io/categories/BZOJ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[BZOJ 2539]]></title>
    <link href="http://platypuspro.github.io/2015/03/13/bzoj-2539/"/>
    <id>http://platypuspro.github.io/2015/03/13/bzoj-2539/</id>
    <published>2015-03-13T13:25:46.000Z</published>
    <updated>2015-03-13T13:46:46.000Z</updated>
    <content type="html"><![CDATA[<p><del>为什么没有只显示标题的选项呢</del><br><a id="more"></a><br><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2539" target="_blank" rel="external">传送门</a></p>
<p>黑书上二分图最优匹配的例题<del>尼玛黑书上说了跟没说一样</del></p>
<p>直接上KM或费用流就可以了 但是好坑啊 QAQ</p>
<p>是否共线直接暴力用叉积和横纵坐标比较就行，名字用哈希乱搞，但是坑真多 = =</p>
<ol>
<li><p>名字大小写不分 <code>Shit=SHIT</code></p>
</li>
<li><p>题目未涉及的两人之间缘分为<code>1</code></p>
</li>
<li><p>如果发现题目给出的两人的线无法连接，则记得把权值赋为<code>-inf</code></p>
</li>
<li><p>还有个我爬了半天的坑是：尼玛没涉及的俩人如果超射程的话连<code>1</code>的缘分也没有，不要这么绝情好不好…</p>
</li>
</ol>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">program</span> bzoj_2539;</span><br><span class="line"><span class="keyword">const</span> mo=<span class="number">1007</span>;</span><br><span class="line">      inf=maxlongint&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">type</span> rec=<span class="keyword">record</span> x,y,h:longint; <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">var</span> pos:<span class="keyword">array</span>[<span class="number">0</span>..mo]<span class="keyword">of</span> longint;</span><br><span class="line">    per:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">60</span>]<span class="keyword">of</span> rec;</span><br><span class="line">    w:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">30</span>,<span class="number">1</span>..<span class="number">30</span>]<span class="keyword">of</span> longint;</span><br><span class="line">    lx,ly,slack,p:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">30</span>]<span class="keyword">of</span> longint;</span><br><span class="line">    vx,vy:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">30</span>]<span class="keyword">of</span> boolean;</span><br><span class="line">    k,n,i,endf,a,b,t,ans:longint;</span><br><span class="line">    s:<span class="keyword">string</span>;</span><br><span class="line">    c:char;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hash</span>:</span>longint;</span><br><span class="line"><span class="keyword">var</span> i:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  hash:=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> length(s) <span class="keyword">do</span> hash:=(hash*<span class="number">107</span>+ord(s[i])*<span class="number">31</span>)<span class="keyword">mod</span> mo;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dis</span><span class="params">(x1,y1,x2,y2:longint)</span>:</span>longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">exit</span>(sqr(x2-x1)+sqr(y2-y1));</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bulb</span><span class="params">(a,b:longint)</span>:</span>boolean;</span><br><span class="line"><span class="keyword">var</span> i:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n&lt;&lt;<span class="number">1</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span> (i=a)<span class="keyword">or</span>(i=b) <span class="keyword">then</span> continue;</span><br><span class="line">    <span class="keyword">if</span> (per[i].x-per[a].x)*(per[i].x-per[b].x)&gt;<span class="number">0</span> <span class="keyword">then</span> continue;</span><br><span class="line">    <span class="keyword">if</span> (per[i].y-per[a].y)*(per[i].y-per[b].y)&gt;<span class="number">0</span> <span class="keyword">then</span> continue;</span><br><span class="line">    <span class="keyword">if</span> (per[i].x-per[a].x)*(per[b].y-per[i].y)=(per[b].x-per[i].x)*(per[i].y-per[a].y) <span class="keyword">then</span> <span class="keyword">exit</span>(true);</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">exit</span>(false);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">path</span><span class="params">(x:longint)</span>:</span>boolean;</span><br><span class="line"><span class="keyword">var</span> i,t:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  vx[x]:=true;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span> vy[i] <span class="keyword">then</span> continue;</span><br><span class="line">    t:=lx[x]+ly[i]-w[x,i];</span><br><span class="line">    <span class="keyword">if</span> t=<span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      vy[i]:=true;</span><br><span class="line">      <span class="keyword">if</span> (p[i]=<span class="number">0</span>)<span class="keyword">or</span>(path(p[i])) <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">begin</span></span><br><span class="line">        p[i]:=x;</span><br><span class="line">        <span class="keyword">exit</span>(true);</span><br><span class="line">      <span class="keyword">end</span>;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> t&lt;slack[i] <span class="keyword">then</span> slack[i]:=t;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">exit</span>(false);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">KM</span>;</span></span><br><span class="line"><span class="keyword">var</span> i,x,d:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  fillchar(ly,sizeof(ly),<span class="number">0</span>);</span><br><span class="line">  fillchar(p,sizeof(p),<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span> x:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    fillchar(slack,sizeof(slack),$<span class="number">3</span>f);</span><br><span class="line">    <span class="keyword">repeat</span></span><br><span class="line">      fillchar(vx,sizeof(vx),false);</span><br><span class="line">      fillchar(vy,sizeof(vy),false);</span><br><span class="line">      <span class="keyword">if</span> path(x) <span class="keyword">then</span> break;</span><br><span class="line">      d:=inf;</span><br><span class="line">      <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span> <span class="keyword">if</span> (<span class="keyword">not</span> vy[i])<span class="keyword">and</span>(slack[i]&lt;d) <span class="keyword">then</span> d:=slack[i];</span><br><span class="line">      <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span> <span class="keyword">if</span> vx[i] <span class="keyword">then</span> dec(lx[i],d);</span><br><span class="line">      <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span> <span class="keyword">if</span> vy[i] <span class="keyword">then</span> inc(ly[i],d);</span><br><span class="line">    <span class="keyword">until</span> false;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span> <span class="keyword">if</span> p[i]&lt;&gt;<span class="number">0</span> <span class="keyword">then</span> inc(ans,w[p[i],i]);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  readln(k);</span><br><span class="line">  readln(n);</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n&lt;&lt;<span class="number">1</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">read</span>(per[i].x,per[i].y,c);</span><br><span class="line">    <span class="keyword">read</span>(c);</span><br><span class="line">    s:=<span class="string">''</span>;</span><br><span class="line">    <span class="keyword">while</span> c <span class="keyword">in</span> [<span class="string">'A'</span>..<span class="string">'z'</span>] <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      s:=s+c;</span><br><span class="line">      <span class="keyword">read</span>(c);</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">    s:=upcase(s);</span><br><span class="line">    readln;</span><br><span class="line">    pos[hash]:=i;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">for</span> a:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">for</span> b:=n+<span class="number">1</span> <span class="keyword">to</span> n&lt;&lt;<span class="number">1</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> (dis(per[a].x,per[a].y,per[b].x,per[b].y)&lt;=k*k)<span class="keyword">and</span>(<span class="keyword">not</span> bulb(a,b)) <span class="keyword">then</span> w[a,b-n]:=<span class="number">1</span> <span class="keyword">else</span> w[a,b-n]:=-inf;</span><br><span class="line">  s:=<span class="string">'END'</span>;</span><br><span class="line">  endf:=hash;</span><br><span class="line">  fillchar(lx,sizeof(lx),<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">repeat</span></span><br><span class="line">    <span class="keyword">read</span>(c);</span><br><span class="line">    s:=<span class="string">''</span>;</span><br><span class="line">    <span class="keyword">while</span> c <span class="keyword">in</span> [<span class="string">'A'</span>..<span class="string">'z'</span>] <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      s:=s+c;</span><br><span class="line">      <span class="keyword">read</span>(c);</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">    s:=upcase(s);</span><br><span class="line">    a:=hash;</span><br><span class="line">    <span class="keyword">if</span> a=endf <span class="keyword">then</span> break;</span><br><span class="line">    <span class="keyword">read</span>(c);</span><br><span class="line">    s:=<span class="string">''</span>;</span><br><span class="line">    <span class="keyword">while</span> c <span class="keyword">in</span> [<span class="string">'A'</span>..<span class="string">'z'</span>] <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      s:=s+c;</span><br><span class="line">      <span class="keyword">read</span>(c);</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">    s:=upcase(s);</span><br><span class="line">    b:=hash;</span><br><span class="line">    <span class="keyword">if</span> pos[a]&gt;n <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      t:=a;</span><br><span class="line">      a:=b;</span><br><span class="line">      b:=t;</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">    a:=pos[a];</span><br><span class="line">    b:=pos[b];</span><br><span class="line">    readln(t);</span><br><span class="line">    <span class="keyword">if</span> (dis(per[a].x,per[a].y,per[b].x,per[b].y)&gt;k*k)<span class="keyword">or</span>(bulb(a,b)) <span class="keyword">then</span> continue;</span><br><span class="line">    w[a,b-n]:=t;</span><br><span class="line">    <span class="keyword">if</span> w[a,b-n]&gt;lx[a] <span class="keyword">then</span> lx[a]:=w[a,b-n];</span><br><span class="line">  <span class="keyword">until</span> false;</span><br><span class="line">  ans:=<span class="number">0</span>;</span><br><span class="line">  KM;</span><br><span class="line">  writeln(ans);</span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p><del>为什么没有只显示标题的选项呢</del><br>]]>
    
    </summary>
    
      <category term="Bipartite-Graph Matching" scheme="http://platypuspro.github.io/tags/Bipartite-Graph-Matching/"/>
    
      <category term="Kuhn-Munkres" scheme="http://platypuspro.github.io/tags/Kuhn-Munkres/"/>
    
      <category term="BZOJ" scheme="http://platypuspro.github.io/categories/BZOJ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Kuhn-Munkres]]></title>
    <link href="http://platypuspro.github.io/2015/03/13/km/"/>
    <id>http://platypuspro.github.io/2015/03/13/km/</id>
    <published>2015-03-13T07:40:24.000Z</published>
    <updated>2015-03-13T13:23:58.000Z</updated>
    <content type="html"><![CDATA[<p>关于KM算法呢…我还没完全搞懂 = = 先扯点我的理解<del>来骗访问量</del>…<br><a id="more"></a><br>大概就是加了顶标的Hungary…然后增广时判断的条件改了一下吧…</p>
<p>对于每个<code>x</code>点记录下顶标<code>label_x</code>，每个<code>y</code>点记录顶标<code>label_y</code><br>初始时<code>label_x[i]</code>的值为与点<code>i</code>相连所有边权值的最大值，<code>label_y</code>都赋为<code>0</code>，这样的话根据下面的增广条件能确保每条边都能够走到</p>
<p>每条边允许通过的条件是<code>label_x[i]+label_y[j]=w[i,j]</code>，如果在当前基础上找不到增广路，则将顶标调整一下，把访问过的<code>x</code>点的顶标减掉一个值<code>d</code>，把访问过的<code>y</code>点的顶标加上一个值<code>d</code>（这样能将更多的边添加进来，证明网上都有），<code>d</code>的值是所有未访问的<code>y</code>点最小的<code>label_x+label_y-w</code>（我太水说不清楚…有啥不懂的直接看代码好了…）可以对每个<code>y</code>点记录与之相连<code>x</code>点中最小的<code>label_x+label_y-w</code></p>
<blockquote>
<p>感觉说的乱七八糟的…贴几个别人的讲解好了…Orz<br><a href="http://blog.csdn.net/niushuai666/article/details/7171880" target="_blank" rel="external">飘过的小牛</a><br><a href="https://www.byvoid.com/blog/match-km/" target="_blank" rel="external">BYVoid</a><br><a href="http://cuitianyi.com/blog/%E6%B1%82%E6%9C%80%E5%A4%A7%E6%9D%83%E4%BA%8C%E5%88%86%E5%8C%B9%E9%85%8D%E7%9A%84km%E7%AE%97%E6%B3%95/" target="_blank" rel="external">Cui Tianyi</a></p>
</blockquote>
<p>这是我<del>照别人的</del>写的裸模板<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">program</span> KM;</span><br><span class="line"><span class="keyword">const</span> maxn=<span class="number">1000</span>;</span><br><span class="line"><span class="keyword">var</span> lx,ly,slack,pair:<span class="keyword">array</span>[<span class="number">1</span>..maxn]<span class="keyword">of</span> longint;</span><br><span class="line">    w:<span class="keyword">array</span>[<span class="number">1</span>..maxn,<span class="number">1</span>..maxn]<span class="keyword">of</span> longint;</span><br><span class="line">    vx,vy:<span class="keyword">array</span>[<span class="number">1</span>..maxn]<span class="keyword">of</span> boolean;</span><br><span class="line">    nx,ny,m,i,a,b,ans:longint;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">path</span><span class="params">(x:longint)</span>:</span>boolean;</span><br><span class="line"><span class="keyword">var</span> i,t:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  vx[x]:=true;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> ny <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span> vy[i] <span class="keyword">then</span> continue;</span><br><span class="line">    t:=lx[x]+ly[i]-w[x,i];</span><br><span class="line">    <span class="keyword">if</span> t=<span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      vy[i]:=true;</span><br><span class="line">      <span class="keyword">if</span> (pair[i]=<span class="number">0</span>)<span class="keyword">or</span>(path(pair[i])) <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">begin</span></span><br><span class="line">        pair[i]:=x;</span><br><span class="line">        <span class="keyword">exit</span>(true);</span><br><span class="line">      <span class="keyword">end</span>;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">if</span> t&lt;slack[i] <span class="keyword">then</span> slack[i]:=t;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">exit</span>(false);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">KM</span>;</span></span><br><span class="line"><span class="keyword">var</span> x,i,d:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  fillchar(pair,sizeof(pair),<span class="number">0</span>);</span><br><span class="line">  fillchar(ly,sizeof(ly),<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span> x:=<span class="number">1</span> <span class="keyword">to</span> nx <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    fillchar(slack,sizeof(slack),$<span class="number">3</span>f);</span><br><span class="line">    <span class="keyword">repeat</span></span><br><span class="line">      fillchar(vx,sizeof(vx),false);</span><br><span class="line">      fillchar(vy,sizeof(vy),false);</span><br><span class="line">      <span class="keyword">if</span> path(x) <span class="keyword">then</span> break;</span><br><span class="line">      d:=$<span class="number">3</span>f;</span><br><span class="line">      <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> ny <span class="keyword">do</span> <span class="keyword">if</span> (<span class="keyword">not</span> vy[i])<span class="keyword">and</span>(slack[i]&lt;d) <span class="keyword">then</span> d:=slack[i];</span><br><span class="line">      <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> nx <span class="keyword">do</span> <span class="keyword">if</span> vx[i] <span class="keyword">then</span> dec(lx[i],d);</span><br><span class="line">      <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> ny <span class="keyword">do</span> <span class="keyword">if</span> vy[i] <span class="keyword">then</span> inc(ly[i],d);</span><br><span class="line">    <span class="keyword">until</span> false;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> ny <span class="keyword">do</span> <span class="keyword">if</span> pair[i]&lt;&gt;<span class="number">0</span> <span class="keyword">then</span> inc(ans,w[pair[i],i]);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  readln(nx,ny,m);</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> nx <span class="keyword">do</span> lx[i]:=-$<span class="number">3</span>f;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> m <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">read</span>(a,b);</span><br><span class="line">    readln(w[a,b]);</span><br><span class="line">    <span class="keyword">if</span> w[a,b]&gt;lx[a] <span class="keyword">then</span> lx[a]:=w[a,b];</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  ans:=<span class="number">0</span>;</span><br><span class="line">  KM;</span><br><span class="line">  writeln(ans);</span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>关于KM算法呢…我还没完全搞懂 = = 先扯点我的理解<del>来骗访问量</del>…<br>]]>
    
    </summary>
    
      <category term="Bipartite-Graph Matching" scheme="http://platypuspro.github.io/tags/Bipartite-Graph-Matching/"/>
    
      <category term="Algorithm" scheme="http://platypuspro.github.io/categories/algorithm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hungary]]></title>
    <link href="http://platypuspro.github.io/2015/03/12/hungary/"/>
    <id>http://platypuspro.github.io/2015/03/12/hungary/</id>
    <published>2015-03-12T10:33:38.000Z</published>
    <updated>2015-03-12T13:49:30.000Z</updated>
    <content type="html"><![CDATA[<p>hung<del>a</del>ry 咕…<br><a id="more"></a><br>对Hungary<del>极其SB</del>通俗易懂的理解是：</p>
<blockquote>
<p>这个点是我的，你走开，去别处再找，拜拜~<br>什么？你找不到点了啊？那我再去找别的好了…</p>
</blockquote>
<p>其实也没什么好讲的，未盖点交错路可增广路什么的真麻烦，举俩例子看看代码就懂了</p>
<p><img src="/img/hungary_1.png" alt=""><br>如上图所示，刚开始<code>x1</code>找到了<code>y1</code>，记录下当前<code>y1</code>与<code>x1</code>匹配<code>（pair[y1]:=x1)</code></p>
<p><img src="/img/hungary_2.png" alt=""><br>然后是<code>x2</code>，<code>x2</code>发现了<code>y1</code>，于是顺着<code>pair[y1]</code>发现了<code>x1</code>，于是呢，<code>x2</code>就和<code>x1</code>商量：这个点归我好不好，你再找找…<br>于是再调用寻找函数看<code>x1</code>还能不能找到另一个匹配点，然后<code>x1</code>发现了<code>y2</code>，<del>他们快乐地生活在了一起</del></p>
<p><img src="/img/hungary_3.png" alt=""><br>然后函数一层层返回时修改每个点与哪个点匹配</p>
<p>举个同时改多个点的例子</p>
<p><img src="/img/hungary_4.png" alt=""><br>匹配到前三个点时是这样的</p>
<p><img src="/img/hungary_5.png" alt=""><br>然后匹配第四个点时就会是这样了，<code>x4</code>抢走了<code>y1</code>，别的结点都找到了另外一个自己的匹配</p>
<p>完了 = = 下面贴上丑代码</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">program</span> hungary;</span><br><span class="line"><span class="keyword">const</span> maxn=<span class="number">1000</span>;</span><br><span class="line"><span class="keyword">var</span> pair:<span class="keyword">array</span>[<span class="number">1</span>..maxn]<span class="keyword">of</span> longint;</span><br><span class="line">    link:<span class="keyword">array</span>[<span class="number">1</span>..maxn,<span class="number">1</span>..maxn]<span class="keyword">of</span> boolean;</span><br><span class="line">    v:<span class="keyword">array</span>[<span class="number">1</span>..maxn]<span class="keyword">of</span> boolean;</span><br><span class="line">    nx,ny,m,i,a,b,match:longint;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">path</span><span class="params">(x:longint)</span>:</span>boolean;</span><br><span class="line"><span class="keyword">var</span> i:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> ny <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> link[x,i] <span class="keyword">and</span> <span class="keyword">not</span> v[i] <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    v[i]:=true;</span><br><span class="line">    <span class="keyword">if</span> (pair[i]=<span class="number">0</span>)<span class="keyword">or</span>(path(pair[i])) <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      pair[i]:=x;</span><br><span class="line">      <span class="keyword">exit</span>(true);</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">exit</span>(false);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">hungary</span>;</span></span><br><span class="line"><span class="keyword">var</span> i:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> nx <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    fillchar(v,sizeof(v),false);</span><br><span class="line">    <span class="keyword">if</span> path(i) <span class="keyword">then</span> inc(match);</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  readln(nx,ny,m);</span><br><span class="line">  fillchar(link,sizeof(link),false);</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> m <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    readln(a,b);</span><br><span class="line">    link[a,b]:=true;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  match:=<span class="number">0</span>;</span><br><span class="line">  fillchar(pair,sizeof(pair),<span class="number">0</span>);</span><br><span class="line">  hungary;</span><br><span class="line">  writeln(match);</span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure>
<p><del>其实只是测试一下文章里插入本地图片  &gt;_&lt;…</del></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>hung<del>a</del>ry 咕…<br>]]>
    
    </summary>
    
      <category term="Bipartite-Graph Matching" scheme="http://platypuspro.github.io/tags/Bipartite-Graph-Matching/"/>
    
      <category term="Algorithm" scheme="http://platypuspro.github.io/categories/algorithm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[BZOJ 2300]]></title>
    <link href="http://platypuspro.github.io/2015/03/12/bzoj-2300/"/>
    <id>http://platypuspro.github.io/2015/03/12/bzoj-2300/</id>
    <published>2015-03-11T23:55:51.000Z</published>
    <updated>2015-03-12T13:49:09.000Z</updated>
    <content type="html"><![CDATA[<p>- ( ゜- ゜)つロ 乾杯~<br><a id="more"></a><br><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2300" target="_blank" rel="external">题目传送门</a></p>
<p>凸包 动态删点并询问当前凸包周长</p>
<p>这道题在线应该也可以，但离线一下就比较好想了，动态删点变成了动态加点</p>
<p>先离线并记录哪些城市始终需要保护，然后把初始的三个点加进去，再把始终要保护的城市加进去并维护</p>
<p>然后倒着来依次加点<del>（别人都用Treap Set神马的，尼玛真短…只会SBT…）</del>，每次加点的步骤如下：</p>
<p>&#160; &#160; &#160; &#160;1.找到在凸包中的前驱节点（左边的点）<code>l</code>与后继节点（右边的点）<code>r</code>，用叉积判断如果在直线<code>lr</code>内侧就说明在凸包内侧然后跳出，否则说明<code>lr</code>这条边一定要删然后删掉并继续</p>
<p>&#160; &#160; &#160; &#160;2.找到<code>l</code>的前驱<code>ll</code>，如果当前要插入的点在<code>l</code>与<code>ll</code>连线的外侧说明<code>l</code>到<code>ll</code>的线段将被覆盖（也就是说<code>l</code>将被覆盖），删掉<code>l</code>这个点，更新答案，从<code>ll</code>继续往下找，重复以上步骤直到找到最左端结点或发现不能覆盖节点<code>l</code>，然后将新连的边加入答案</p>
<p>&#160; &#160; &#160; &#160;3.右端的操作类似</p>
<p>&#160; &#160; &#160; &#160;4.将当前点加入<del>肯德基豪华午餐，仅需15元</del>凸包</p>
<blockquote>
<h3 id="Tips">Tips</h3><p>如果每次修改都重新计算一遍凸包周长肯定慢死，所以开一个全局变量记录当前凸包周长修改时改这个就好了，反正一步步修改每一步只改一条边</p>
<p>求前驱和后继一定注意要找与当前点不同的，要不然不存在直线的</p>
<p>叉积真是个好东西…</p>
</blockquote>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">program</span> bzoj_2300;</span><br><span class="line"><span class="keyword">type</span> point=<span class="keyword">record</span> x,y:longint; <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">var</span> p:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">100000</span>]<span class="keyword">of</span> point;</span><br><span class="line">    q:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">200000</span>]<span class="keyword">of</span> longint;</span><br><span class="line">    ans:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">200000</span>]<span class="keyword">of</span> extended;</span><br><span class="line">    curans:extended;</span><br><span class="line">    n,m,query,i,k,tot,root:longint;</span><br><span class="line">    cap:point;</span><br><span class="line">    s:<span class="keyword">array</span>[<span class="number">0</span>..<span class="number">100000</span>]<span class="keyword">of</span> <span class="keyword">record</span> lc,rc,size,x,y:longint; <span class="keyword">end</span>;</span><br><span class="line">    flag:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">100000</span>]<span class="keyword">of</span> boolean;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sml</span><span class="params">(x1,y1,x2,y2:longint)</span>:</span>boolean;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">if</span> (x1&lt;&gt;x2) <span class="keyword">then</span> <span class="keyword">exit</span>(x1&lt;x2);</span><br><span class="line">  <span class="keyword">exit</span>(y1&lt;y2);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dis</span><span class="params">(x1,y1,x2,y2:longint)</span>:</span>extended;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">exit</span>(sqrt(sqr(x2-x1)+sqr(y2-y1)));</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cross</span><span class="params">(x1,y1,x2,y2:longint)</span>:</span>longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">exit</span>(x1*y2-x2*y1);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">l_rotate</span><span class="params">(<span class="keyword">var</span> t:longint)</span>;</span></span><br><span class="line"><span class="keyword">var</span> k:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  k:=s[t].rc;</span><br><span class="line">  s[t].rc:=s[k].lc;</span><br><span class="line">  s[k].lc:=t;</span><br><span class="line">  s[k].size:=s[t].size;</span><br><span class="line">  s[t].size:=s[s[t].lc].size+s[s[t].rc].size+<span class="number">1</span>;</span><br><span class="line">  t:=k;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">r_rotate</span><span class="params">(<span class="keyword">var</span> t:longint)</span>;</span></span><br><span class="line"><span class="keyword">var</span> k:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  k:=s[t].lc;</span><br><span class="line">  s[t].lc:=s[k].rc;</span><br><span class="line">  s[k].rc:=t;</span><br><span class="line">  s[k].size:=s[t].size;</span><br><span class="line">  s[t].size:=s[s[t].lc].size+s[s[t].rc].size+<span class="number">1</span>;</span><br><span class="line">  t:=k;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">maintain</span><span class="params">(<span class="keyword">var</span> t:longint;flag:boolean)</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> flag <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">if</span> s[s[s[t].lc].lc].size&gt;s[s[t].rc].size <span class="keyword">then</span> r_rotate(t) <span class="keyword">else</span></span><br><span class="line">  <span class="keyword">if</span> s[s[s[t].lc].rc].size&gt;s[s[t].rc].size <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    l_rotate(s[t].lc);</span><br><span class="line">    r_rotate(t);</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">exit</span>;</span><br><span class="line">  <span class="keyword">if</span> flag <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">if</span> s[s[s[t].rc].rc].size&gt;s[s[t].lc].size <span class="keyword">then</span> l_rotate(t) <span class="keyword">else</span></span><br><span class="line">  <span class="keyword">if</span> s[s[s[t].rc].lc].size&gt;s[s[t].lc].size <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    r_rotate(s[t].rc);</span><br><span class="line">    l_rotate(t);</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">else</span> <span class="keyword">exit</span>;</span><br><span class="line">  maintain(s[t].lc,false);</span><br><span class="line">  maintain(s[t].rc,true);</span><br><span class="line">  maintain(t,false);</span><br><span class="line">  maintain(t,true);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">insert</span><span class="params">(<span class="keyword">var</span> t:longint;x,y:longint)</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">if</span> t=<span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    inc(tot);</span><br><span class="line">    t:=tot;</span><br><span class="line">    s[t].x:=x;</span><br><span class="line">    s[t].y:=y;</span><br><span class="line">    s[t].size:=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  inc(s[t].size);</span><br><span class="line">  <span class="keyword">if</span> sml(x,y,s[t].x,s[t].y) <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    insert(s[t].lc,x,y);</span><br><span class="line">    maintain(t,false);</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">else</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    insert(s[t].rc,x,y);</span><br><span class="line">    maintain(t,true);</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pred</span><span class="params">(t,x,y:longint)</span>:</span>point;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  pred.x:=<span class="number">0</span>;</span><br><span class="line">  pred.y:=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> t&lt;&gt;<span class="number">0</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> sml(x,y,s[t].x,s[t].y)<span class="keyword">or</span>((s[t].x=x)<span class="keyword">and</span>(s[t].y=y)) <span class="keyword">then</span> t:=s[t].lc <span class="keyword">else</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    pred.x:=s[t].x;</span><br><span class="line">    pred.y:=s[t].y;</span><br><span class="line">    t:=s[t].rc;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">succ</span><span class="params">(t,x,y:longint)</span>:</span>point;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  succ.x:=n;</span><br><span class="line">  succ.y:=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> t&lt;&gt;<span class="number">0</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> sml(s[t].x,s[t].y,x,y)<span class="keyword">or</span>((s[t].x=x)<span class="keyword">and</span>(s[t].y=y)) <span class="keyword">then</span> t:=s[t].rc <span class="keyword">else</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    succ.x:=s[t].x;</span><br><span class="line">    succ.y:=s[t].y;</span><br><span class="line">    t:=s[t].lc;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delete</span><span class="params">(<span class="keyword">var</span> t:longint;x,y:longint)</span>:</span>longint;</span><br><span class="line"><span class="keyword">var</span> d:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  dec(s[t].size);</span><br><span class="line">  <span class="keyword">if</span> ((s[t].x=x)<span class="keyword">and</span>(s[t].y=y))<span class="keyword">or</span>(sml(x,y,s[t].x,s[t].y)<span class="keyword">and</span>(s[t].lc=<span class="number">0</span>))<span class="keyword">or</span>(sml(s[t].x,s[t].y,x,y)<span class="keyword">and</span>(s[t].rc=<span class="number">0</span>)) <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    delete:=t;</span><br><span class="line">    <span class="keyword">if</span> (s[t].lc=<span class="number">0</span>)<span class="keyword">or</span>(s[t].rc=<span class="number">0</span>) <span class="keyword">then</span> t:=s[t].lc+s[t].rc <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      d:=delete(s[t].lc,x,y+<span class="number">1</span>);</span><br><span class="line">      s[t].x:=s[d].x;</span><br><span class="line">      s[t].y:=s[d].y;</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">else</span></span><br><span class="line">  <span class="keyword">if</span> sml(x,y,s[t].x,s[t].y) <span class="keyword">then</span> <span class="keyword">exit</span>(delete(s[t].lc,x,y)) <span class="keyword">else</span> <span class="keyword">exit</span>(delete(s[t].rc,x,y));</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">addpoint</span><span class="params">(x,y:longint)</span>;</span></span><br><span class="line"><span class="keyword">var</span> l,r,ll,rr:point;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  l:=pred(root,x,y);</span><br><span class="line">  r:=succ(root,x,y);</span><br><span class="line">  <span class="keyword">if</span> cross(x-l.x,y-l.y,r.x-l.x,r.y-l.y)&gt;=<span class="number">0</span> <span class="keyword">then</span> <span class="keyword">exit</span>;</span><br><span class="line">  curans:=curans-dis(l.x,l.y,r.x,r.y);</span><br><span class="line">  <span class="keyword">while</span> (l.x&lt;&gt;<span class="number">0</span>)<span class="keyword">and</span>(l.y&lt;&gt;<span class="number">0</span>) <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    ll:=pred(root,l.x,l.y);</span><br><span class="line">    <span class="keyword">if</span> cross(x-l.x,y-l.y,ll.x-l.x,ll.y-l.y)&gt;=<span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      curans:=curans-dis(l.x,l.y,ll.x,ll.y);</span><br><span class="line">      delete(root,l.x,l.y);</span><br><span class="line">      l:=ll;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">else</span> break;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  curans:=curans+dis(l.x,l.y,x,y);</span><br><span class="line">  <span class="keyword">while</span> (r.x&lt;n)<span class="keyword">and</span>(r.y&lt;&gt;<span class="number">0</span>) <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    rr:=succ(root,r.x,r.y);</span><br><span class="line">    <span class="keyword">if</span> cross(x-r.x,y-r.y,rr.x-r.x,rr.y-r.y)&lt;=<span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      curans:=curans-dis(r.x,r.y,rr.x,rr.y);</span><br><span class="line">      delete(root,r.x,r.y);</span><br><span class="line">      r:=rr;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">else</span> break;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  curans:=curans+dis(r.x,r.y,x,y);</span><br><span class="line">  insert(root,x,y);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  readln(n,cap.x,cap.y);</span><br><span class="line">  readln(m);</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> m <span class="keyword">do</span> <span class="keyword">read</span>(p[i].x,p[i].y);</span><br><span class="line">  readln(query);</span><br><span class="line">  fillchar(q,sizeof(q),<span class="number">0</span>);</span><br><span class="line">  root:=<span class="number">0</span>;</span><br><span class="line">  tot:=<span class="number">0</span>;</span><br><span class="line">  fillchar(s,sizeof(s),<span class="number">0</span>);</span><br><span class="line">  insert(root,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">  insert(root,n,<span class="number">0</span>);</span><br><span class="line">  insert(root,cap.x,cap.y);</span><br><span class="line">  curans:=dis(<span class="number">0</span>,<span class="number">0</span>,cap.x,cap.y)+dis(n,<span class="number">0</span>,cap.x,cap.y);</span><br><span class="line">  fillchar(flag,sizeof(flag),true);</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> query <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">read</span>(k);</span><br><span class="line">    <span class="keyword">if</span> k=<span class="number">2</span> <span class="keyword">then</span> continue;</span><br><span class="line">    <span class="keyword">read</span>(q[i]);</span><br><span class="line">    flag[q[i]]:=false;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> m <span class="keyword">do</span> <span class="keyword">if</span> flag[i] <span class="keyword">then</span> addpoint(p[i].x,p[i].y);</span><br><span class="line">  fillchar(ans,sizeof(ans),<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span> i:=query <span class="keyword">downto</span> <span class="number">1</span> <span class="keyword">do</span> <span class="keyword">if</span> q[i]=<span class="number">0</span> <span class="keyword">then</span> ans[i]:=curans <span class="keyword">else</span> addpoint(p[q[i]].x,p[q[i]].y);</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> query <span class="keyword">do</span> <span class="keyword">if</span> ans[i]&lt;&gt;<span class="number">0</span> <span class="keyword">then</span> writeln(ans[i]:<span class="number">0</span>:<span class="number">2</span>);</span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>- ( ゜- ゜)つロ 乾杯~<br>]]>
    
    </summary>
    
      <category term="Dynamic Convex Hull" scheme="http://platypuspro.github.io/tags/Dynamic-Convex-Hull/"/>
    
      <category term="BZOJ" scheme="http://platypuspro.github.io/categories/BZOJ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[BZOJ 1070+2879]]></title>
    <link href="http://platypuspro.github.io/2015/03/11/bzoj-1070-2879/"/>
    <id>http://platypuspro.github.io/2015/03/11/bzoj-1070-2879/</id>
    <published>2015-03-11T09:57:40.000Z</published>
    <updated>2015-03-13T11:13:54.000Z</updated>
    <content type="html"><![CDATA[<p><del>more标签前面就不能不放东西吗…</del><br><a id="more"></a></p>
<h2 id="1070"><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1070" target="_blank" rel="external">1070</a></h2><p>题意很简单就不扯了，关键是建图</p>
<p>因为一个人可能要修好几辆车，所以一个点代表一个人的话似乎怎么连都无法满足条件：</p>
<ol>
<li><p>若从源向每个人连一条容量1费用0的边，这个人还怎么修好几辆车…</p>
</li>
<li><p>若从源向每个人连一条容量inf费用0的边，而这个人又向好多车各连了一条容量1费用t[i,j]的边，这样就可能造成这个人同时修了好几辆车…</p>
</li>
</ol>
<p>考虑一下所有的情况，共m个人，每个人最多需要修理n次，其中每次修理需要花费t的时间，对于一个人来说，等这个人第i次修车需要顾客等待t*i的时间</p>
<p>考虑所有情况来建图的话，可以将每个人拆成n个点，第i个点表示这个人第i次修车，这些点全部和每辆车各连一条容量1费用为&lt;修车次数i*每辆车的等待时间t&gt;的边，这样就把每个人、所有车、可能发生的每次修车都考虑到了，共n*m个点，每个点连了n条边</p>
<p>最后从每辆车向汇连一条容量1费用0的边，建图完成</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">program</span> bzoj_1070;</span><br><span class="line"><span class="keyword">var</span> n,m,ans,i,j,k,tot,ss,tt:longint;</span><br><span class="line">    time:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">60</span>,<span class="number">1</span>..<span class="number">10</span>]<span class="keyword">of</span> longint;</span><br><span class="line">    d,lst,from:<span class="keyword">array</span>[<span class="number">0</span>..<span class="number">601</span>]<span class="keyword">of</span> longint;</span><br><span class="line">    l:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">100000</span>]<span class="keyword">of</span> <span class="keyword">record</span> st,ed,f,c,pre:longint; <span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">min</span><span class="params">(a,b:longint)</span>:</span>longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">if</span> a&lt;b <span class="keyword">then</span> <span class="keyword">exit</span>(a) <span class="keyword">else</span> <span class="keyword">exit</span>(b);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">link</span><span class="params">(a,b,f,c:longint)</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  inc(tot);</span><br><span class="line">  l[tot].pre:=lst[a];</span><br><span class="line">  lst[a]:=tot;</span><br><span class="line">  l[tot].st:=a;</span><br><span class="line">  l[tot].ed:=b;</span><br><span class="line">  l[tot].f:=f;</span><br><span class="line">  l[tot].c:=c;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">insert</span><span class="params">(a,b,f,c:longint)</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  link(a,b,f,c);</span><br><span class="line">  link(b,a,<span class="number">0</span>,-c);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">spfa</span>:</span>boolean;</span><br><span class="line"><span class="keyword">const</span> qs=<span class="number">100000</span>;</span><br><span class="line"><span class="keyword">var</span> hd,tl,now,t:longint;</span><br><span class="line">    q:<span class="keyword">array</span>[<span class="number">1</span>..qs]<span class="keyword">of</span> longint;</span><br><span class="line">    v:<span class="keyword">array</span>[<span class="number">0</span>..qs]<span class="keyword">of</span> boolean;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  fillchar(d,sizeof(d),$<span class="number">7</span>f);</span><br><span class="line">  fillchar(v,sizeof(v),false);</span><br><span class="line">  hd:=<span class="number">0</span>;</span><br><span class="line">  tl:=<span class="number">1</span>;</span><br><span class="line">  q[<span class="number">1</span>]:=ss;</span><br><span class="line">  d[ss]:=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> hd&lt;&gt;tl <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    inc(hd);</span><br><span class="line">    <span class="keyword">if</span> hd&gt;qs <span class="keyword">then</span> hd:=<span class="number">1</span>;</span><br><span class="line">    now:=q[hd];</span><br><span class="line">    t:=lst[now];</span><br><span class="line">    <span class="keyword">while</span> t&lt;&gt;<span class="number">0</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      <span class="keyword">if</span> (l[t].f&gt;<span class="number">0</span>)<span class="keyword">and</span>(d[l[t].ed]&gt;d[now]+l[t].c) <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">begin</span></span><br><span class="line">        d[l[t].ed]:=d[now]+l[t].c;</span><br><span class="line">        from[l[t].ed]:=t;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> v[l[t].ed] <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">          v[l[t].ed]:=true;</span><br><span class="line">          inc(tl);</span><br><span class="line">          <span class="keyword">if</span> tl&gt;qs <span class="keyword">then</span> tl:=<span class="number">1</span>;</span><br><span class="line">          q[tl]:=l[t].ed;</span><br><span class="line">        <span class="keyword">end</span>;</span><br><span class="line">      <span class="keyword">end</span>;</span><br><span class="line">      t:=l[t].pre;</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">    v[now]:=false;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">if</span> d[tt]&gt;maxlongint&gt;&gt;<span class="number">1</span> <span class="keyword">then</span> <span class="keyword">exit</span>(false);</span><br><span class="line">  <span class="keyword">exit</span>(true);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">flow</span>;</span></span><br><span class="line"><span class="keyword">var</span> f,x:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  x:=from[tt];</span><br><span class="line">  f:=maxlongint;</span><br><span class="line">  <span class="keyword">while</span> x&lt;&gt;<span class="number">0</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    f:=min(f,l[x].f);</span><br><span class="line">    x:=from[l[x].st];</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  x:=from[tt];</span><br><span class="line">  <span class="keyword">while</span> x&lt;&gt;<span class="number">0</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    dec(l[x].f,f);</span><br><span class="line">    inc(l[x xor <span class="number">1</span>].f,f);</span><br><span class="line">    inc(ans,l[x].c*f);</span><br><span class="line">    x:=from[l[x].st];</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  readln(m,n);</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">for</span> j:=<span class="number">1</span> <span class="keyword">to</span> m <span class="keyword">do</span> <span class="keyword">read</span>(time[i,j]);</span><br><span class="line">  tot:=<span class="number">1</span>;</span><br><span class="line">  ss:=<span class="number">0</span>;</span><br><span class="line">  tt:=n*m+n+<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> m*n <span class="keyword">do</span> insert(ss,i,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span> i:=n*m+<span class="number">1</span> <span class="keyword">to</span> n*m+n <span class="keyword">do</span> insert(i,tt,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> m <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">for</span> j:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">for</span> k:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span></span><br><span class="line">  insert((i-<span class="number">1</span>)*n+j,n*m+k,<span class="number">1</span>,time[k,i]*j);</span><br><span class="line">  <span class="keyword">while</span> spfa <span class="keyword">do</span> flow;</span><br><span class="line">  writeln(ans/n:<span class="number">0</span>:<span class="number">2</span>);</span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure>
<h2 id="2879"><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2879" target="_blank" rel="external">2879</a></h2><p>这道题思路与1070基本相同，只是数据略大…按照1070的办法根本存不下，所以我们只添加有用的边，任何时刻使每个厨师的所有点中，只有一个点向菜连着边，就是说只考虑每个厨师的下次做菜，这次做完了再连新的，具体实现就是每次流完之后处理一下</p>
<p>这道题还要注意就是，菜的种数是n，但每种菜可能要做好多份，所以一个厨师做菜的最大次数是所有菜的份数和，还有可以不必每份菜向汇连一条容量1费用0的边，可以直接每种菜向汇连一条容量p[i]费用0的边</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">program</span> bzoj_2879;</span><br><span class="line"><span class="keyword">var</span> l:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">3200000</span>]<span class="keyword">of</span> <span class="keyword">record</span> st,ed,pre,f,c:longint; <span class="keyword">end</span>;</span><br><span class="line">    pp:<span class="keyword">array</span>[<span class="number">0</span>..<span class="number">40</span>]<span class="keyword">of</span> longint;</span><br><span class="line">    n,m,p,i,j,ans,tot,ss,tt:longint;</span><br><span class="line">    t:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">40</span>,<span class="number">1</span>..<span class="number">100</span>]<span class="keyword">of</span> longint;</span><br><span class="line">    lst,d,from:<span class="keyword">array</span>[<span class="number">0</span>..<span class="number">81000</span>]<span class="keyword">of</span> longint;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">min</span><span class="params">(a,b:longint)</span>:</span>longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">if</span> a&lt;b <span class="keyword">then</span> <span class="keyword">exit</span>(a) <span class="keyword">else</span> <span class="keyword">exit</span>(b);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">link</span><span class="params">(a,b,f,c:longint)</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  inc(tot);</span><br><span class="line">  l[tot].pre:=lst[a];</span><br><span class="line">  lst[a]:=tot;</span><br><span class="line">  l[tot].st:=a;</span><br><span class="line">  l[tot].ed:=b;</span><br><span class="line">  l[tot].f:=f;</span><br><span class="line">  l[tot].c:=c;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">insert</span><span class="params">(a,b,f,c:longint)</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  link(a,b,f,c);</span><br><span class="line">  link(b,a,<span class="number">0</span>,-c);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">spfa</span>:</span>boolean;</span><br><span class="line"><span class="keyword">const</span> qs=<span class="number">81000</span>;</span><br><span class="line"><span class="keyword">var</span> q:<span class="keyword">array</span>[<span class="number">1</span>..qs]<span class="keyword">of</span> longint;</span><br><span class="line">    v:<span class="keyword">array</span>[<span class="number">0</span>..qs]<span class="keyword">of</span> boolean;</span><br><span class="line">    hd,tl,now,k:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  hd:=<span class="number">0</span>;</span><br><span class="line">  tl:=<span class="number">1</span>;</span><br><span class="line">  q[<span class="number">1</span>]:=ss;</span><br><span class="line">  fillchar(v,sizeof(v),false);</span><br><span class="line">  fillchar(d,sizeof(d),$<span class="number">7</span>f);</span><br><span class="line">  v[ss]:=true;</span><br><span class="line">  d[ss]:=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> hd&lt;&gt;tl <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    inc(hd);</span><br><span class="line">    <span class="keyword">if</span> hd&gt;qs <span class="keyword">then</span> hd:=<span class="number">1</span>;</span><br><span class="line">    now:=q[hd];</span><br><span class="line">    k:=lst[now];</span><br><span class="line">    <span class="keyword">while</span> k&lt;&gt;<span class="number">0</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      <span class="keyword">if</span> (l[k].f&gt;<span class="number">0</span>)<span class="keyword">and</span>(d[now]+l[k].c&lt;d[l[k].ed]) <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">begin</span></span><br><span class="line">        d[l[k].ed]:=d[now]+l[k].c;</span><br><span class="line">        from[l[k].ed]:=k;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> v[l[k].ed] <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">          v[l[k].ed]:=true;</span><br><span class="line">          inc(tl);</span><br><span class="line">          <span class="keyword">if</span> tl&gt;qs <span class="keyword">then</span> tl:=<span class="number">1</span>;</span><br><span class="line">          q[tl]:=l[k].ed;</span><br><span class="line">        <span class="keyword">end</span>;</span><br><span class="line">      <span class="keyword">end</span>;</span><br><span class="line">      k:=l[k].pre;</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">    v[now]:=false;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">if</span> d[tt]&gt;maxlongint&gt;&gt;<span class="number">1</span> <span class="keyword">then</span> <span class="keyword">exit</span>(false);</span><br><span class="line">  <span class="keyword">exit</span>(true);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">flow</span>;</span></span><br><span class="line"><span class="keyword">var</span> x,f,c,pos,cnt:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  x:=from[tt];</span><br><span class="line">  f:=maxlongint;</span><br><span class="line">  <span class="keyword">while</span> x&lt;&gt;<span class="number">0</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    f:=min(f,l[x].f);</span><br><span class="line">    <span class="keyword">if</span> l[x].st=ss <span class="keyword">then</span> pos:=l[x].ed;</span><br><span class="line">    x:=from[l[x].st];</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  x:=from[tt];</span><br><span class="line">  <span class="keyword">while</span> x&lt;&gt;<span class="number">0</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    inc(ans,f*l[x].c);</span><br><span class="line">    dec(l[x].f,f);</span><br><span class="line">    inc(l[x xor <span class="number">1</span>].f,f);</span><br><span class="line">    x:=from[l[x].st];</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  c:=(pos-<span class="number">1</span>)<span class="keyword">mod</span> m+<span class="number">1</span>;</span><br><span class="line">  cnt:=(pos-<span class="number">1</span>) <span class="keyword">div</span> m+<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> x:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span> insert(cnt*m+c,m*p+x,<span class="number">1</span>,t[x,c]*(cnt+<span class="number">1</span>));</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  readln(n,m);</span><br><span class="line">  p:=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">read</span>(pp[i]);</span><br><span class="line">    inc(p,pp[i]);</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">for</span> j:=<span class="number">1</span> <span class="keyword">to</span> m <span class="keyword">do</span> <span class="keyword">read</span>(t[i,j]);</span><br><span class="line">  ss:=<span class="number">0</span>;</span><br><span class="line">  tt:=m*p+n+<span class="number">1</span>;</span><br><span class="line">  tot:=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> p <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">for</span> j:=<span class="number">1</span> <span class="keyword">to</span> m <span class="keyword">do</span> insert(ss,(i-<span class="number">1</span>)*m+j,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span> insert(m*p+i,tt,pp[i],<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> m <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">for</span> j:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span> insert(i,m*p+j,<span class="number">1</span>,t[j,i]);</span><br><span class="line">  ans:=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> spfa <span class="keyword">do</span> flow;</span><br><span class="line">  writeln(ans);</span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p><del>more标签前面就不能不放东西吗…</del><br>]]>
    
    </summary>
    
      <category term="Min Cost Flow" scheme="http://platypuspro.github.io/tags/Min-Cost-Flow/"/>
    
      <category term="BZOJ" scheme="http://platypuspro.github.io/categories/BZOJ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[BZOJ 3192]]></title>
    <link href="http://platypuspro.github.io/2015/03/11/bzoj-3192/"/>
    <id>http://platypuspro.github.io/2015/03/11/bzoj-3192/</id>
    <published>2015-03-11T02:35:48.000Z</published>
    <updated>2015-03-16T13:00:22.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3192" title="3192" target="_blank" rel="external">传送门</a><br><a id="more"></a><br><del>尼玛more标签不能放在开头吗</del><br>如果存到两个数组里面移来移去的一定很麻烦，那么就可以想一想能不能存到一起<br>题目上写着说移动方式只能从一个顶端移动到另一个顶端，底端是没法直接移动的<br>那么就可以把两个底端挨在一起存起来（第一摞倒着第二摞正着），对于这个存在一起的数组而言，移动操作就成了将数组循环左移或右移一位<br>然后就可以上树状数组了，统计每个元素左边有几个<br>将权值从大到小排序依次删（别忘了记录每个元素原来的位置）<br>还要记录一下两堆物品的分界点，每次移动后记得更新，还要靠这个更新答案（也就是说这个数组动了几下）初始在两摞中间，所以要多开一个空节点，还不能累计进答案<br>ans记得开long long<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">program</span> bzoj_3192;</span><br><span class="line"><span class="keyword">type</span> rec=<span class="keyword">record</span> k,p:longint; <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">var</span> b:<span class="keyword">array</span>[<span class="number">0</span>..<span class="number">100000</span>]<span class="keyword">of</span> longint;</span><br><span class="line">    a:<span class="keyword">array</span>[<span class="number">1</span>..<span class="number">100001</span>]<span class="keyword">of</span> rec;</span><br><span class="line">    n1,n2,n,now,i:longint;</span><br><span class="line">    ans:int64;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span><span class="params">(x:longint)</span>:</span>longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">exit</span>(x <span class="keyword">and</span> (-x));</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">plus</span><span class="params">(p,d:longint)</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">while</span> p&lt;=n <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    inc(b[p],d);</span><br><span class="line">    inc(p,c(p));</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">qsort</span><span class="params">(l,r:longint)</span>;</span></span><br><span class="line"><span class="keyword">var</span> i,j:longint;</span><br><span class="line">    mid,p:rec;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  i:=l;</span><br><span class="line">  j:=r;</span><br><span class="line">  mid:=a[(l+r)&gt;&gt;<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">repeat</span></span><br><span class="line">    <span class="keyword">while</span> a[i].k&gt;mid.k <span class="keyword">do</span> inc(i);</span><br><span class="line">    <span class="keyword">while</span> a[j].k&lt;mid.k <span class="keyword">do</span> dec(j);</span><br><span class="line">    <span class="keyword">if</span> i&lt;=j <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      p:=a[i];</span><br><span class="line">      a[i]:=a[j];</span><br><span class="line">      a[j]:=p;</span><br><span class="line">      inc(i);</span><br><span class="line">      dec(j);</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">until</span> i&gt;j;</span><br><span class="line">  <span class="keyword">if</span> i&lt;r <span class="keyword">then</span> qsort(i,r);</span><br><span class="line">  <span class="keyword">if</span> l&lt;j <span class="keyword">then</span> qsort(l,j);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">query</span><span class="params">(p:longint)</span>:</span>longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  query:=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> p&gt;<span class="number">0</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    inc(query,b[p]);</span><br><span class="line">    dec(p,c(p));</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ask</span><span class="params">(l,r:longint)</span>:</span>longint;</span><br><span class="line"><span class="keyword">var</span> p:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">if</span> l&gt;r <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    p:=l;</span><br><span class="line">    l:=r;</span><br><span class="line">    r:=p;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">exit</span>(query(r)-query(l-<span class="number">1</span>)-<span class="number">1</span>);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  fillchar(b,sizeof(b),<span class="number">0</span>);</span><br><span class="line">  readln(n1,n2);</span><br><span class="line">  n:=n1+n2+<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=n1 <span class="keyword">downto</span> <span class="number">1</span> <span class="keyword">do</span> readln(a[i].k);</span><br><span class="line">  <span class="keyword">for</span> i:=n1+<span class="number">2</span> <span class="keyword">to</span> n <span class="keyword">do</span> readln(a[i].k);</span><br><span class="line">  now:=n1+<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span> i&lt;&gt;now <span class="keyword">then</span> plus(i,<span class="number">1</span>);</span><br><span class="line">    a[i].p:=i;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  qsort(<span class="number">1</span>,n);</span><br><span class="line">  ans:=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> i:=<span class="number">1</span> <span class="keyword">to</span> n-<span class="number">1</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    inc(ans,ask(a[i].p,now));</span><br><span class="line">    plus(a[i].p,-<span class="number">1</span>);</span><br><span class="line">    now:=a[i].p;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  writeln(ans);</span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3192" title="3192">传送门</a><br>]]>
    
    </summary>
    
      <category term="Binary Indexed Tree" scheme="http://platypuspro.github.io/tags/Binary-Indexed-Tree/"/>
    
      <category term="BZOJ" scheme="http://platypuspro.github.io/categories/BZOJ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://platypuspro.github.io/2015/03/04/hello-world/"/>
    <id>http://platypuspro.github.io/2015/03/04/hello-world/</id>
    <published>2015-03-04T06:12:00.000Z</published>
    <updated>2015-03-13T06:27:46.000Z</updated>
    <content type="html"><![CDATA[<p>~!@#$%^&amp;*()_+<br><a id="more"></a></p>
<h1 id="Hello_World">Hello World</h1><h2 id="Hello_World-1">Hello World</h2><h3 id="Hello_World-2">Hello World</h3><h4 id="Hello_World-3">Hello World</h4><h5 id="Hello_World-4">Hello World</h5><h6 id="Hello_World-5">Hello World</h6><p>咦Markdown怪好玩的</p>
<ul>
<li>One</li>
<li>Two</li>
<li>Three</li>
</ul>
<hr>
<hr>
<hr>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">program</span> ab;</span><br><span class="line"><span class="keyword">var</span> a,b:longint;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  readln(a,b);</span><br><span class="line">  writeln(a+b);</span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Too young too simple,somtimes naive</p>
</blockquote>
<p><img src="https://github.com/identicons/platypuspro.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>~!@#$%^&amp;*()_+<br>]]>
    
    </summary>
    
      <category term="Others" scheme="http://platypuspro.github.io/categories/others/"/>
    
  </entry>
  
</feed>